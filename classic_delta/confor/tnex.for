      SUBROUTINE NEXTC (ITYPC, NSTAT, KSTAT, IMC, IALTC, ICDES, LCDES,      TNEX
     * NC, IKEYCH, IAS, MS, ISBND, LIDAT, ICSTR, LCSTR)

C* REVISED 26-MAR-93.
C* OUTPUTS CHARACTER INFORMATION FOR USE IN NEXUS FORMAT.

C  ITYPC RECEIVES THE CHARACTER TYPES.
C  NSTAT RECEIVES THE NUMBERS OF STATES.
C  KSTAT RECEIVES THE NUMBERS OF KEY STATES.
C  IMC RECEIVES THE CHARACTER MASK.
C  IALTC RECEIVES WHETHER TO USE THE ALTERNATE COMMA CHARACTER.
C  ICDES RECEIVES THE STARTING POSITIONS OF THE CHARACTER DESCRIPTIONS.
C  LCDES RECEIVES THE LENGTHS OF THE CHARACTER DESCRIPTIONS.
C  NC RECEIVES THE NUMBER OF CHARACTERS.
C  IKEYCH RECEIVES WHETHER A KEY CHARACTER LIST IS BEING USED.
C  IAS RECEIVES WORDING SPACE OF LENGTH MS.
C  MS RECEIVES THE MAXIMUM NUMBER OF STATES.
C  ISBND RECEIVES THE NEW STATE BOUNDARIES.
C  LIDAT RECEIVES THE DATA BUFFER LENGTH.
C  ICSTR. IF ISTYPE.EQ.1, ICSTR RECEIVES THE CHARACTER DESCRIPTIONS.
C    IF ISTYPE.NE.1, ICSTR IS WORKING SPACE. SEE SUBR. FETCHC.
C  LCSTR RECEIVES THE DIMENSION OF ICSTR.
 
      COMMON /ALPXXX/ KA,KB,KC,KD,KE,KF,KG,KH,KI,KJ,KK,KL,KM,
     *                KN,KO,KP,KQ,KR,KS,KT,KU,KV,KW,KX,KY,KZ
      COMMON /BLKXXX/ KBLANK
      COMMON /JSTXXX/ IOUT(132,5),LOUT,ICAP,
     * JIOUT(5),IENDWD(5),INDEN(5),LWIDTH(5),PSEQ,SEQINC,NSQDIG
      COMMON /LUOXXX/ NUN,LPAGE,LPRINT,LTOP,LPRDEF,LPUDEF,
     * LUNCOM(15),LUNPRE(15),LUNUSE(19),LUNREC(19),LUNPAG(19)
      COMMON /SCRNMX/ SCRNAM(7)
        CHARACTER*8 SCRNAM
      COMMON /SCRXXX/ LUNTS1,LUNTS2,LUNTS3,LUNTS4,LUNTS5,LUNTS6,LUNTS7
      COMMON /SYMXXX/ KPOINT,KDASH,KSTAR,KVERT,KEQUAL,KCOMMA,KSEMIC,
     * KCOLON,KSTOP,KSOL,KLPAR,KRPAR,KDOLLA,KQUEST,KEXCL,KAT,KLBRACE,
     * KRBRACE
      COMMON /VLWXXX/ NVWD,MAXVWD,LVWD(18),IBPUNC,IEPUNC,
     * KVSTOP,KVCOM1,KVCOM2,KVSEMI,KVDEC
      COMMON /VWDXXX/ VWORD(18)
         CHARACTER*40 VWORD
 
      DIMENSION ITYPC(NC),NSTAT(NC),KSTAT(NC),IMC(NC),IALTC(NC),
     * ICDES(NC),LCDES(NC),IAS(MS),ISBND(LIDAT),ICSTR(LCSTR)

      CHARACTER FSPEC*60
      INTEGER IA(35)
      PARAMETER (LBUF = 32)

C     OPEN SCRATCH FILE 4 TO STORE INTERMEDIATE DATA.
      LRECS4 = LBUF
      CALL GETAU (LUN)
      FSPEC = SCRNAM(4)
      CALL SETLUN (FSPEC, LUN, LUNTS4)
      CALL UOPEN (LUN, LUNUSE(LUN), FSPEC, LRECS4, IERR)
      IF (IERR.NE.0)  CALL MESSA (36, -1, 0)
      LUNTYP = LUNTS4

      ICREC = 0
      ISREC = NONZER(IMC, NC)
      DO 1000 IC = 1, NC
C-    FETCH AND WRITE CHARACTER DESCRIPTION.
         IF (IMC(IC).EQ.0) GO TO 1000
         CALL FETCHC (ICSTR, LCSTR, ICDES, LCDES, NC, IC, IAC, IAS, MS)
         CALL SENSIM (ICSTR(IAC), LCSTR, IA, LBUF, LBUF, JBF, 1, 0)
         CALL WRDAI (IA, JBF, LUN, LRECS4, ICREC)

C-    FETCH AND WRITE STATE DESCRIPTIONS.
         NS = KSTAT(IC)
         IF (NS.LE.0) GO TO 1000
C     SET COMMA CHARACTER TO BE USED.
         IF (IALTC(IC).EQ.0)  THEN
            KCOM = KVCOM1
         ELSE
            KCOM = KVCOM2
         ENDIF
         JTYPC = IABS(ITYPC(IC))
         IF (ISBND(IC).NE.0.AND.IKEYCH.EQ.0) GO TO 200

C-    NON-KEY STATE DESCRIPTIONS.
         DO 100 IS = 1, NS
            I = IAS(IS)
            CALL SENSIM (ICSTR(I), LCSTR, IA, LBUF, LBUF, JBF, 0, 0)
            CALL WRDAI (IA, JBF, LUN, LRECS4, ISREC)
 100     CONTINUE
         GO TO 1000

C-    KEY STATE DESCRIPTIONS
 200     JSG = ISBND(IC) + 1
         DO 500 JS = 1, NS

C-    NEW STATES
            NB = JSG + 2
            NE = JSG + ISBND(JSG) - 1
            ITS = ISBND(JSG+1)
            LL = LBUF
            JB = 0
            IF (JTYPC.GE.3) GOTO 300

C-    MULTISTATE
            DO 230 J = NB, NE
               I = IAS(ISBND(J))
               IF (LL.LE.0) GOTO 475
               CALL SENSIM (ICSTR(I), LCSTR, IA(JB+1), LL, 1, JBF, 
     *              0, 0)
               LL = LL - JBF
               JB = JB + JBF
               IF (J.EQ.NE) GOTO 400
               IF (JTYPC.EQ.2) THEN
                  IWD = 2
               ELSE
                  CALL OUTWRD(KCOM, IA, LBUF, JB, LL)
                  IWD = 1
               ENDIF
               CALL OUTSYM (KBLANK, IA, JB, LL)
               CALL OUTWRD (IWD, IA, LBUF, JB, LL)
 230        CONTINUE
            GOTO 400

C-    NUMERIC
 300        IF (NSTAT(IC).EQ.1) I1 = IAS(1)
            IF (JTYPC.EQ.4) GOTO 310
            VMIN = ISBND(NB)
            VMAX = ISBND(NE)
            GOTO 320
 310        VMIN = RELIN (ISBND(NB))
            VMAX = RELIN (ISBND(NE))

 320        IF (NE.GT.NB) GOTO 340
C     ONE VALUE
            IF (JS.EQ.1.AND.ITS.EQ.3) 
     *           CALL OUTWRD (12, IA, LBUF, JB, LL)
            CALL OUTNUM (VMIN, IA, JB, LL, 1)
            IF (NSTAT(IC).EQ.1) THEN
               CALL SENSIM (ICSTR(I1), LCSTR, IA(JB+1), LL, 1, JBF, 
     *              0, 0)
               JB = JB + JBF
               LL = LL - JBF
               CALL OUTSYM (KBLANK, IA, JB, LL)
            ENDIF
            IF (JS.EQ.NS.AND.ITS.EQ.3)
     *           CALL OUTWRD (13, IA, LBUF, JB, LL)
            GOTO 400

C     MORE THAN ONE VALUE

 340        CALL OUTNUM (VMIN, IA, JB, LL, 1)
            CALL OUTWRD (2, IA, LBUF, JB, LL)
            CALL OUTNUM (VMAX, IA, JB, LL, 1)
            IF (NSTAT(IC).EQ.1) THEN
               IF (LL.LE.0) GOTO 475
               CALL SENSIM (ICSTR(I1), LCSTR, IA(JB+1), LL, 1, JBF,
     *              0, 0)
               JB = JB + JBF
               LL = LL - JBF
               CALL OUTSYM (KBLANK, IA, JB, LL)
            ENDIF
            
 400        IF (ISBND(IC).GT.0) JSG = JSG + ISBND(JSG)
            IF (JB.LT.LBUF) THEN
               DO 450 I = JB + 1, LBUF
                  IA(I) = KBLANK
 450           CONTINUE
            ENDIF
                  
 475        CALL WRDAI (IA, LBUF, LUN, LRECS4, ISREC)
 500     CONTINUE

 1000 CONTINUE
      RETURN
      END
      SUBROUTINE NEXCRD (IMC, ITYPC, KSTAT, WTC, NC, ITYPMK, LIDAT, JIM,    TNEX
     * WORK)
 
C* REVISED 28-JUL-00.
C* OUTPUTS CONTROL CARDS FOR NEXUS FORMAT.
 
C  IMC RECEIVES THE CHARACTER MASK. (NOTE THAT CHARACTERS WITH
C   KSTAT(IC).LE.1.OR.KSTAT(IC).GT.26 HAVE BEEN MASKED OUT BY
C   SUBR. CHKDK.)
C  ITYPC RECEIVES THE CHARACTER TYPES.
C  KSTAT RECEIVES THE NUMBERS OF KEY STATES.
C  WTC RECEIVES THE CHARACTER WEIGHTS.
C  NC RECEIVES THE NUMBER OF CHARACTERS.
C  ITYPMK RECEIVES TYPESETTING MARKS.
C  LIDAT RECEIVES THE LENGTH OF ITYPMK.
C  JIM RECEIVES THE NUMBER OF MASKED-IN ITEMS.
C  WORK RECEIVES WORKING SPACE OF LENGTH NC.
 
C  THE OUTPUT BUFFER IS IOUT(1,4).
 
      DIMENSION IMC(NC),ITYPC(NC),KSTAT(NC),WTC(NC),ITYPMK(LIDAT),
     * WORK(NC), IA(35), IAB(35)
      CHARACTER*1 KODNEX(2,12),NEXUS(6),KLBRAC,KRBRAC,KQUOTE,BEGIN(10),
     * PAR(6,2),FORM(8,3),ASSUMP(11),UNTITL(8),ORD(3)
 
      COMMON /ALPXXX/ KA,KB,KC,KD,KE,KF,KG,KH,KI,KJ,KK,KL,KM,
     *                KN,KO,KP,KQ,KR,KS,KT,KU,KV,KW,KX,KY,KZ
      COMMON /BLKXXX/ KBLANK
      COMMON /DELXXX/ KDPLUS,KDSTAR,KDNUM,KDSOL,KDLBRA,KDRBRA,
     * KDCOM,KDRANG,KDAMP,KDCOLN,KDSTOP,KDINF,KDLPAR,KDRPAR,KDBSLSH
      COMMON /HEDXXX/ LHEAD,IHEAD(200)
      COMMON /JSTXXX/ IOUT(132,5),LOUT,ICAP,
     * JIOUT(5),IENDWD(5),INDEN(5),LWIDTH(5),PSEQ,SEQINC,NSQDIG
      COMMON /LUFXXX/ FNAME(19),LFNAME(19)
        CHARACTER FNAME*80
      COMMON /LUNXXX/ LUNE,LUNL,LUNO,LUNP,LUNS1,LUNBO,LUNBI,LUNI,LUNDA,
     * LUNS2,LUNS3,LUNS4,LUNS5,LUNS6,LUNS7
      COMMON /LUOXXX/ NUN,LPAGE,LPRINT,LTOP,LPRDEF,LPUDEF,
     * LUNCOM(15),LUNPRE(15),LUNUSE(19),LUNREC(19),LUNPAG(19)
      COMMON /PAUPXX/ KPAU(32)
      COMMON /SYMXXX/ KPOINT,KDASH,KSTAR,KVERT,KEQUAL,KCOMMA,KSEMIC,
     * KCOLON,KSTOP,KSOL,KLPAR,KRPAR,KDOLLA,KQUEST,KEXCL,KAT,KLBRACE,
     * KRBRACE
 
C     KEY WORDS REQUIRED FOR NEXUS SPECIFICATIONS.
C     1 - NEXUS. 2- HEADING. 3 - DATA. 4 - DIMENSIONS. 5 - FORMAT.
C     6 - MATRIX. 7 - CHARLABELS. 8 - STATELABELS. 9 - END.
C     10 - ASSUMPTIONS. 11 - TYPESET. 12 - WTSET.
 
      DATA NEXUS  /'#','N','E','X','U','S'/
      DATA ASSUMP /'A','S','S','U','M','P','T','I','O','N','S'/
      DATA BEGIN  /'B','E','G','I','N',' ','D','A','T','A'/
      DATA UNTITL /'u','n','t','i','t','l','e','d'/
      DATA ORD    /'o','r','d'/
      DATA KLBRAC /'['/
      DATA KRBRAC /']'/
      DATA KQUOTE /'"'/
      DATA PAR
     *     /'N','T','A','X','=',' ',
     *      'N','C','H','A','R','='/
      DATA FORM
     *     /'M','I','S','S','I','N','G','=',
     *      'G','A','P','=',' ',' ',' ',' ',
     *      'S','Y','M','B','O','L','S','='/
C
C     KEY WORDS
      DATA KODNEX(1,1),KODNEX(2,1)/'N','E'/
      DATA KODNEX(1,2),KODNEX(2,2)/'H','E'/
      DATA KODNEX(1,3),KODNEX(2,3)/'D','A'/
      DATA KODNEX(1,4),KODNEX(2,4)/'D','I'/
      DATA KODNEX(1,5),KODNEX(2,5)/'F','O'/
      DATA KODNEX(1,6),KODNEX(2,6)/'M','A'/
      DATA KODNEX(1,7),KODNEX(2,7)/'C','H'/
      DATA KODNEX(1,8),KODNEX(2,8)/'S','T'/
      DATA KODNEX(1,9),KODNEX(2,9)/'E','N'/
      DATA KODNEX(1,10),KODNEX(2,10)/'A','S'/
      DATA KODNEX(1,11),KODNEX(2,11)/'T','Y'/
      DATA KODNEX(1,12),KODNEX(2,12)/'W','T'/
      DATA NKODES /12/
 
      CALL ENDLN (4)
C
      MCHAR = NONZER(IMC,NC)
C
C--   READ SPECIFICATION CARDS
   50 CALL CARDI (IOUT(1,4), ICARD)
        IF (ICARD.LT.0)  GO TO 7000
C-
        ICOL = 1
   60   IF (ICOL.GE.79)  GO TO 6000
          IF (IOUT(ICOL,4).EQ.KDNUM)  GO TO 70
          ICOL = ICOL + 1
          GO TO 60
C
   70   ICOL = ICOL + 1
        IB = ICOL
   75   IF (ICOL.GE.80)  GO TO 80
          IF (IOUT(ICOL,4).EQ.KBLANK)  GO TO 80
          ICOL = ICOL + 1
          GO TO 75
   80   IE = ICOL - 1
        CALL CONPHR (KODNEX, 2, NKODES, 2, IOUT(1,4), IB, IE, ICODE, JE)
        IF (ICODE.LE.0)  GO TO 5000
        IF (ICODE.LT.4.OR.ICODE.EQ.10)
     *       GOTO 95
C
C-      BEGIN KEY WORD IN COLUMN 1
        NCHAR = IE - IB + 1
        DO 90 I = 1, NCHAR
          IOUT(I,4) = IOUT(IB+I-1,4)
   90     CONTINUE
        JIOUT(4) = NCHAR
        CALL JSTS (KBLANK, -1, 4)
C
C-      ACT ON KEY WORD.
   95   GO TO (100,200,300,400,500,600,700,800,900,1000,1100,1200), 
     *       ICODE
 
C-      NEXUS.
  100   CALL COPCIA (NEXUS(1), IA, 6)
        CALL JSTOUT (IA, 6, 2, 4, 0)
        GO TO 50

C-      HEADING.
  200   CALL COPCIA (KLBRAC, IOUT(1,4), 1)
        IOUT(2,4) = KEXCL
        CALL SENSIM (IHEAD(2), LHEAD, IOUT(3,4), 79, 1, JE, 0, 0)
        JE = JE + 3
        CALL COPCIA (KRBRAC, IOUT(JE,4), 1)
        CALL WRTREC (IOUT(1,4), JE, 4, 4)
        GO TO 50
 
C-      DATA. (BEGIN DATA BLOCK)
  300   CALL COPCIA (BEGIN(1), IA, 10)
        CALL JSTOUT (IA, 10, -1, 4, 0)
        CALL JSTS (KSEMIC, 1, 4)
        GO TO 50
 
C-      DIMENSIONS.
  400   CALL COPCIA (PAR(1,1), IA, 5)
        CALL JSTOUT (IA, 5, -1, 4, 0)
        CALL JSTI (JIM, 0, 4)
        CALL COPCIA (PAR(1,2), IA, 6)
        CALL JSTOUT (IA, 6, -1, 4, 0)
        CALL JSTI (MCHAR, -1, 4)
        CALL JSTS (KSEMIC, 2, 4)
        GO TO 50

C-      FORMAT.
C       MISSING.
  500   CALL COPCIA (FORM(1,1), IA, 8)
        CALL JSTOUT (IA, 8, -1, 4, 0)
        CALL JSTS (KQUEST, 0, 4)
C       GAP.
        CALL COPCIA (FORM(1,2), IA, 4)
        CALL JSTOUT (IA, 4, -1, 4, 0)
        CALL JSTS (KDASH, 0, 4)
C       SYMBOLS.
        CALL COPCIA (FORM(1,3), IA, 8)
        CALL JSTOUT (IA, 8, -1, 4, 0)
        CALL COPCIA (KQUOTE, IA, 1)
        CALL JSTOUT (IA, 1, -1, 4, 0)
        NSMAX = 0
        DO 510 IC = 1, NC
          IF (IMC(IC).EQ.0)  GOTO 510
          IF (KSTAT(IC).GT.NSMAX) NSMAX = KSTAT(IC)
  510   CONTINUE
        DO 520 IC = 1, NSMAX
          CALL JSTS (KPAU(IC), -1, 4)
  520   CONTINUE
	CALL JSTOUT (IA, 1, -1, 4, 0)
        CALL JSTS (KSEMIC, 2, 4)
        GO TO 50
 
C-      MATRIX
  600   CALL ENDLN(4)
        REWIND LUNS1
        LUNREC(LUNS1) = 0
  610   CALL RREC (IOUT(1,4), LPUDEF, LUNS1, LREC)
C     *    FNAME(LUNS1), LFNAME(LUNS1), LUNREC(LUNS1))
          IF (LREC.LT.0)  GOTO 650
          LUNREC(LUNS1) = LUNREC(LUNS1) + 1
          IF (LREC.EQ.0)  GOTO 640
          CALL WRTREC (IOUT(1,4), LREC, 4, 4)
  640   GOTO 610
  650   CONTINUE
        CLOSE (UNIT=LUNS1, STATUS='DELETE')
        CALL JSTS (KSEMIC, 2, 4)
        GOTO 50

C-      CHARLABELS. RETRIEVE FROM SCRATCH UNIT 4
  700   IF (LUNS4.LT.0) THEN
          CALL MESSA (51, 1, 0)
          GOTO 50
        ENDIF
        CALL ENDLN(4)
        ICM = 0
        DO 750 IC = 1, NC
           IF (IMC(IC).EQ.0) GOTO 750
           ICM = ICM + 1
           CALL COPCIA (KLBRAC, IA, 1)
           CALL JSTOUT (IA, 1, -1, 4, 0)
           CALL JSTI (ICM, -1, 4)
           CALL JSTS (KLPAR, -1, 4)
           CALL JSTI (IC, -1, 4)
           CALL JSTS (KRPAR, -1, 4)
           CALL COPCIA (KRBRAC, IA, 1)
           CALL JSTOUT (IA, 1, 0, 4, 0)
           CALL RDDAI (IA, 32, LUNS4, 32, ICM)
           MAXLEN = MIN0(35, LPUDEF - JIOUT(4))
           CALL NEXNAM (IA, 32, IAB, MAXLEN, -1)
           CALL JSTOUT(IAB, MAXLEN, 1, 4, 0)
 750    CONTINUE
C       CLOSE (UNIT=LUNS4, STATUS='DELETE')
        CALL JSTS (KSEMIC, 2, 4)
        GOTO 50

C-      STATELABELS. RETRIEIVE FROM SCRATCH UNIT 4.
  800   IF (LUNS4.LT.0) THEN
          CALL MESSA (51, 1, 0)
          GOTO 50
        ENDIF
        CALL ENDLN(4)
        ICM = 0
        ISREC = MCHAR + 1
        DO 850 IC = 1, NC
           IF (IMC(IC).EQ.0) GOTO 850
           ICM = ICM + 1
           NS = KSTAT(IC)
           IF (NS.LE.0) GOTO 850
           CALL JSTI (ICM, 0, 4)
           DO 840 JS = 1, NS
              CALL RDDAI (IA, 32, LUNS4, 32, ISREC)
              ISREC = ISREC + 1
              MAXLEN = 32
              CALL NEXNAM (IA, 32, IAB, MAXLEN, -1)
              IF (JIOUT(4) + MAXLEN .GT. LPUDEF) THEN
                 CALL ENDLN(4)
                 CALL INDENT(5, 4)
              ENDIF
              IWRD = 0
              IF (JS.EQ.NS) IWRD = -1
              CALL JSTOUT (IAB, MAXLEN, IWRD, 4, 0)
 840       CONTINUE
           CALL JSTS (KCOMMA, 1, 4)
 850    CONTINUE
        CALL JSTS (KSEMIC, 2, 4)
        GOTO 50
        
C-      END.
  900   JIOUT(4) = JIOUT(4) - 1
        CALL JSTS (KSEMIC, 2, 4)
        GOTO 50

C-      ASSUMPTIONS. (BEGIN ASSUMPTIONS BLOCK)
 1000   CALL COPCIA (BEGIN(1), IA, 5)
        CALL JSTOUT (IA, 5, 0, 4, 0)
        CALL COPCIA (ASSUMP(1), IA, 11)
        CALL JSTOUT (IA, 11, -1, 4, 0)
        CALL JSTS (KSEMIC, 1, 4)
        GO TO 50

C-      TYPESET. (ORDER VS. UNORDERED CHARACTERS)
 1100   CALL JSTS (KSTAR, 0, 4)
        CALL COPCIA (UNTITL(1), IA, 8)
        CALL JSTOUT (IA, 8, 0, 4, 0)
        CALL JSTS (KEQUAL, 0, 4)
	IORDFL = 0
        DO 1160 IORD = 1, 2
           IB = 0
           IE = 0
           ICM = 0
           DO 1150 IC = 1, NC
              IF (IMC(IC).EQ.0) GOTO 1150
              ICM = ICM + 1
              IF (IABS(ITYPC(IC)).NE.1) THEN
                 IF (IORD.EQ.1) GOTO 1150
              ELSE
                 IF (IORD.NE.1) GOTO 1150
              ENDIF
              IF (IB.EQ.0) THEN
                 IF (IORD.EQ.1) THEN
                    CALL COPCIA (UNTITL(1), IA, 2)
                    CALL JSTOUT (IA, 2, -1, 4, 0)
                    IORDFL = 1
                 ELSE IF (IORDFL.NE.0) THEN
                    CALL JSTS (KCOMMA, 0, 4)
                 ENDIF
                 CALL COPCIA (ORD(1), IA, 3)
                 CALL JSTOUT (IA, 3, -1, 4, 0)
                 CALL JSTS (KCOLON, 0, 4)
                 GOTO 1110
              ENDIF
              IF (ICM.EQ.IE+1) GOTO 1120
              CALL JSTI (IB, -1, 4)
              IF (IB.NE.IE) THEN
                 CALL PRANGE (1, ITYPMK, LIDAT, 4)
                 CALL JSTI (IE, -1, 4)
              ENDIF
              CALL ENDWD(4)
 1110         IB = ICM
 1120         IE = ICM
 1150      CONTINUE
           IF (IB.GT.0) THEN
              CALL JSTI (IB, -1, 4)
              IF (IB.NE.IE) THEN
                 CALL PRANGE (1, ITYPMK, LIDAT, 4)
                 CALL JSTI (IE, -1, 4)
              ENDIF
           ENDIF
 1160   CONTINUE
        CALL JSTS (KSEMIC, 2, 4)
        GOTO 50

C-      WTSET.
 1200   CALL JSTS (KSTAR, 0, 4)
        CALL COPCIA (UNTITL(1), IA, 8)
        CALL JSTOUT (IA, 8, 0, 4, 0)
        CALL JSTS (KEQUAL, 0, 4)
        NWGTS = 0

C     LOOP THROUGH CHARACTERS, STORING EACH UNIQUE WEIGHT.
        DO 1240 IC = 1, NC
           IF (IMC(IC).EQ.0) GOTO 1240
           WT = WTC(IC)
           IF (WT.LE.0) WT = 1.0
           DO 1220 IWT = 1, NWGTS
              IF (ABS(WORK(IWT) - WT) .LE. 0.005) GOTO 1240
 1220      CONTINUE
           NWGTS = NWGTS + 1
           WORK(NWGTS) = WT
C     SORT WEIGHTS AS WE GO.
           DO 1230 IWT = NWGTS - 1, 1, -1
              IF (WORK(IWT) .LT. WT) GOTO 1240
              WORK(IWT+1) = WORK(IWT)
              WORK(IWT) = WT
 1230      CONTINUE
 1240   CONTINUE

C     FOR EACH WEIGHT IN THE SET, WRITE LIST OF CHARACTERS WHICH MATCH.
        DO 1290 IWT = 1, NWGTS
           IB = 0
           IE = 0
           ICM = 0
           DO 1280 IC = 1, NC
              IF (IMC(IC).EQ.0) GOTO 1280
              ICM = ICM + 1
              WT = WTC(IC)
              IF (WT.LE.0) WT = 1.0
              IF (ABS(WORK(IWT) - WT) .GT. 0.005) GOTO 1280
              IF (IB.EQ.0) THEN
C                CALL JSTI(NINT(100.0*WORK(IWT)), -1, 4)
                 CALL JSTR(WORK(IWT), -2, -1, 4, 0)
                 CALL JSTS(KCOLON, 0, 4)
                 GOTO 1250
              ENDIF
              IF (ICM.EQ.IE+1) GOTO 1260
              CALL JSTI (IB, -1, 4)
              IF (IB.NE.IE) THEN
                 CALL PRANGE (1, ITYPMK, LIDAT, 4)
                 CALL JSTI (IE, -1, 4)
              ENDIF
              CALL ENDWD (4)
 1250         IB = ICM
 1260         IE = ICM
 1280      CONTINUE
           IF (IB.GT.0) THEN
              CALL JSTI (IB, -1, 4)
              IF (IB.NE.IE) THEN
                 CALL PRANGE (1, ITYPMK, LIDAT, 4)
                 CALL JSTI (IE, -1, 4)
              ENDIF
              IF (IWT .NE. NWGTS) CALL JSTS (KCOMMA, 0, 4)
           ENDIF
 1290   CONTINUE
        CALL JSTS (KSEMIC, 2, 4)
        GOTO 50
           
 5000 CALL MESSA (12, 3, JE)
C
 6000 CALL WRTREC (IOUT(1,4), 80, 4, 4)
      GO TO 50
C
 7000 CONTINUE
      END
      SUBROUTINE NEXTI (ITM, ISBND, LIDAT, ITYPC, IMC, KSTAT,               TNEX
     * IWORK, NC, ISTAT, MS, IMI, JI)
 
C* REVISED 26-AUG-98.
C  OUTPUTS AN ITEM IN NEXUS FORMAT.
 
C  ITM RECEIVES THE ITEM.
C  ISBND RECEIVES THE KEY STATE BOUNDARIES.
C  LIDAT RECEIVES THE DIMENSION OF ITM AND ISBND.
C  ITYPC RECEIVES THE CHARACTER TYPES.
C  IMC RECEIVES THE CHARACTER MASK.
C  KSTAT RECEIVES THE NUMBERS OF KEY STATES.
C  IWORK RECEIVES WORKING SPACE OF LENGTH NC.
C  NC RECEIVES THE NUMBER OF CHARACTERS.
C  ISTAT IS WORKING SPACE OF LENGTH MS.
C  MS RECEIVES THE MAXIMUM NUMBER OF STATES.
C  IMI RECEIVES THE ITEM MASK.
C  JI RECEIVES THE ITEM NUMBER.
C  IUMEAN RECEIVES WHETHER TO USE THE MEAN VALUE WHEN CALCULATING KEY
C   STATES FOR ORDERED MULTISTATES AND NUMERICS.
 
C  PROCEDURE FOR DETERMINING NEXUS VALUES.
C  1. NUMERIC CHARACTERS FOR WHICH KEY STATES HAVE NOT BEEN SPECIFIED ARE
C     EXCLUDED.
C  2. ONLY NORMAL VALUES OF NUMERIC CHARACTERS ARE USED. EXTREME VALUES
C     ARE IGNORED.
C  3. KEY STATES ARE APPLIED. ALL NUMERIC CHARACTERS ARE SUBSEQUENTLY TREATED
C     AS ORDERED MULTISTATE.
C  4. IF `USE MEAN VALUES' IS IN FORCE, MULTIPLE VALUES OF ORDERED MULTISTATES
C     (INCLUDING FORMER NUMERICS) ARE REPLACED BY THEIR MEAN.
C  5. THE VALUE OR VALUES ARE OUTPUT.
 
      DIMENSION ITM(LIDAT),ISBND(LIDAT),
     * ITYPC(NC),IMC(NC),KSTAT(NC),IWORK(NC),
     * ISTAT(MS),IMI(JI)
 
      COMMON /ALPXXX/ KA,KB,KC,KD,KE,KF,KG,KH,KI,KJ,KK,KL,KM,
     *                KN,KO,KP,KQ,KR,KS,KT,KU,KV,KW,KX,KY,KZ
      COMMON /BLKXXX/ KBLANK
      COMMON /ITSXXX/ ITSS
      COMMON /JSTXXX/ IOUT(132,5),LOUT,ICAP,
     * JIOUT(5),IENDWD(5),INDEN(5),LWIDTH(5),PSEQ,SEQINC,NSQDIG
      COMMON /LUOXXX/ NUN,LPAGE,LPRINT,LTOP,LPRDEF,LPUDEF,
     * LUNCOM(15),LUNPRE(15),LUNUSE(19),LUNREC(19),LUNPAG(19)
      COMMON /MISXXX/ IMPVAL,IPACH,IPCHN,IPUNC,IRAB,IKEYCH,ICMPRS,
     * ITUNC,ITINAP,ITIMPL,IUNVAR,LNKC,IDEPC,LICDEP,IPSUMM,ICHSEQ,
     * ITMSEQ,INSRVA,IFATT,ITINTR,ICMAND,IUNRNG,IOMTOR,NEWFLS,IRSEMI,
     * IOMSTC,IADDCH,IEMPCH,IVARUN,ISCALC,ICNOTE,ICIMGE,ITIMGE,MTIMGE,
     * NTIMGE,IOMNSC,IOMCMT,IOMLOW,IERRPC,IERRAB,ICHNSE,NUMST0,IUMEAN,
     * NADNAM,NEMNAM,NODELO,IOMUSP,ICKYIMG,ITKYIMG,ISUPIMG,ICTIMGE,
     * ICTNAME,IHTML,IRTF,MTHEAD,NTHEAD,ITMHDGS,LCDNAM,MTFILE,NTFILE,
     * ITMFILS,MXHEAD,NXHEAD,IDXHDGS,INSIMGFN,ICOFILE,IUCC,IOUNC,ITLINK,
     * MTLINK,NTLINK,NAUTOCC,IOUTSUBJ
      COMMON /NUMXXX/ KNUM(10),KDEC,KMINUS
      COMMON /PAUPXX/ KPAU(32)
      COMMON /SCRNMX/ SCRNAM(7)
        CHARACTER*8 SCRNAM
      COMMON /SCRXXX/ LUNTS1,LUNTS2,LUNTS3,LUNTS4,LUNTS5,LUNTS6,LUNTS7
      COMMON /SYMXXX/ KPOINT,KDASH,KSTAR,KVERT,KEQUAL,KCOMMA,KSEMIC,
     * KCOLON,KSTOP,KSOL,KLPAR,KRPAR,KDOLLA,KQUEST,KEXCL,KAT,KLBRACE,
     * KRBRACE
 
C     LOCAL ARRAYS.
      DIMENSION KALP(26),ITSF(3),IA(35)
      CHARACTER FSPEC*60
      EQUIVALENCE (KA,KALP(1))
 
      IF (JI.GT.1)  GOTO 10
 
C-    DEFINE STATE SYMBOLS.
C-    USE STATE SYMBOLS (1-9 A-W) OR (0-9 A-X), DEPENDING ON VALUE OF NUMST0
      IF (NUMST0.NE.0) NUMST0 = 1
      DO 2 I = 1, 9 + NUMST0
        KPAU(I) = KNUM(I-NUMST0+1)
    2 CONTINUE
      DO 4 I = 10 + NUMST0, 32
        KPAU(I) = KALP(I-NUMST0-9)
    4 CONTINUE
 
C-    OPEN SCRATCH FILE FOR MATRIX.
      CALL GETAU (L)
      FSPEC = SCRNAM(1)
      CALL SETLUN (FSPEC, L, LUNTS1)
      CALL UOPEN (L, LUNUSE(L), FSPEC, IDUMMY, IERR)
      IF (IERR.NE.0)  CALL MESSB (20, 1, 1, -1, 0)
 
   10 IF (IMI(JI).EQ.0)  GOTO 2000
 
C     EXTRACT ITEM NAME.
      LUNTYP = LUNTS1
C     Check for alternative name defined by CHARACTER FOR TAXON NAME.
      IALTNAME = 0
      IF (ICTNAME.NE.0.AND.ITM(ICTNAME).NE.0) THEN
        JG = ITM(ICTNAME)
        JSG = JG + 1
C       CHECK THAT THERE IS SOMETHING THERE
        IF (JSG.LT.JG+ITM(JG))  THEN
          IB = JSG + 2
          L = ITM(JSG) - 2
C         IGNORE ANGLE BRACKETS, THUS REDUCING LENGTH BY 2.
          IB = IB + 1
          L = MIN0(L-2, 32)
          IF (L.GT.0) IALTNAME = 1
        ENDIF
      ENDIF
      IF (IALTNAME.NE.0) THEN
C       COPY TEXT, OMITTING LEADING AND TRAILING ANGLE BRACKETS
        CALL COPIA (ITM(IB), IA(1), L)
      ELSE
        CALL SENSIM (ITM(NC+2), LIDAT, IA(1), 32, 1, L, 0, 0)
      ENDIF
      CALL NEXNAM (IA, L, IOUT(1,LUNTYP), 35, 1)
      JBF = 35
      IF (NONZER(IMC,NC).GT.LPUDEF-35) THEN
         CALL WRTREC (IOUT(1,LUNTYP), JBF, LUNTYP, 4)
         JBF = 0
      ENDIF

C--   OUTPUT ATTRIBUTES.
 
      CALL SETIA (IWORK, NC, 1)
      DO 1000 IC = 1, NC
        IF (IMC(IC).EQ.0)  GOTO 1000
        IF (ITM(IC).LE.0)  GO TO 510
        JTYPC = IABS(ITYPC(IC))
 
C       APPLY KEY STATES.
        CALL FNDKST (ITM, ISBND, IC, LIDAT, ITYPC, KSTAT, IWORK, NC,
     *   1, ISTAT, MS, ITSF, JI, 0.0, 0.0)
        KNS = KSTAT(IC)
        NZ = NONZER (ISTAT, KNS)
        IF (NZ.EQ.1)  THEN
          DO IS = 1, KNS
            IF (ISTAT(IS).NE.0)  THEN
              JBF = JBF + 1
              IOUT(JBF,LUNTYP) = KPAU(IS)
              GOTO 600
            ENDIF
          ENDDO 
        ELSEIF (NZ.GT.1)  THEN
          IF (IUMEAN.NE.0.AND.JTYPC.GE.2) GOTO 100
          GOTO 200
        ELSE
          GOTO 510
C         IF (NONZER(ITSF,3).NE.0)  GOTO 510
        ENDIF
 
C       USE MEAN VALUES.
  100   VAL = 0.0
        N = 0
        DO I = 1, KNS
          IF (ISTAT(I).NE.0)  THEN
            VAL = VAL + I
            N = N + 1
          ENDIF
        ENDDO
        VAL = VAL/N
        IS = INT((VAL + 0.49))
        JBF = JBF + 1
        IOUT(JBF,LUNTYP) = KPAU(IS)
        GOTO 600
 
C       OUTPUT MULTIPLE VALUES IN PARENTHESES.
  200   IF (JBF+NZ+2.GT.LPUDEF) THEN
          CALL WRTREC(IOUT(1,LUNTYP), JBF, LUNTYP, 4)
          JBF = 0
        ENDIF
        JBF = JBF + 1
        IOUT(JBF,LUNTYP) = KLPAR
        DO 210 IS = 1, KNS
          IF (ISTAT(IS).EQ.0) GOTO 210
          JBF = JBF + 1
          IOUT(JBF, LUNTYP) = KPAU(IS)
 210    CONTINUE
        JBF = JBF + 1
        IOUT(JBF,LUNTYP) = KRPAR
        GOTO 600
 
C       UNKNOWN OR NOT APPLICABLE.
  510   KSYM = KQUEST
        IF (ITSF(3).NE.0)  KSYM = KDASH
        JBF = JBF + 1
        IOUT(JBF,LUNTYP) = KSYM
 
  600   IF (JBF.GE.LPUDEF)  THEN
          CALL WRTREC (IOUT(1,LUNTYP), JBF, LUNTYP, 4)
          JBF = 0
        ENDIF
 
 1000   CONTINUE
 
      IF (JBF.GT.0)  CALL WRTREC (IOUT(1,LUNTYP), JBF, LUNTYP, 4)
 
 2000 RETURN
      END
      SUBROUTINE NEXNAM (NAMIN, LIN, NAMOUT, LOUT, IPAD)
C
C  CONVERTS A NAME INTO A FORM SUITABLE FOR USE AS A NEXUS LABEL.
C  NAMIN IS AN INTEGER ARRAY CONTAINING THE INPUT STRING.
C  LIN IS LENGTH OF NAMIN.
C  NAMOUT IS THE INTEGER ARRAY TO RECEIVE THE OUTPUT STRING.
C  LOUT RECEIVES LENGTH OF NAMOUT, AND RETURNS LENGTH OF THE NEW STRING.
C  IPAD IS PADDING FLAGGING. IPAD .GT. 0 - PAD STRING TO LENGTH LOUT.
C                            IPAD .EQ. 0 - NO PADDING.
C                            IPAD .LT. 0 - REMOVE TRAILING BLANKS.

C  CURRENTLY THIS IS DONE THE "EASY" WAY - JUST PUT SINGLE QUOTES AROUND 
C  THE STRING AND DOUBLE ANY INCLUDED QUOTES.

      DIMENSION NAMIN(LIN), NAMOUT(LOUT)

      COMMON /BLKXXX/ KBLANK

C  NEXUS STRINGS ARE CURRENTLY LIMITED TO 32 CHARACTERS.
      PARAMETER (NEXMAX = 32)
      CHARACTER*1 KQUOTE
      DATA KQUOTE /''''/

      LENOUT = 0
      IF (LIN.LE.0.OR.LOUT.LE.2) GO TO 1000

C MAXLM1 IS MAXIMUM OUTPUT STRING LENGTH, MINUS 1
      MAXLM1 = MIN0(NEXMAX, LOUT) - 1
      LENOUT = 1
      NAMOUT(LENOUT) = ICHAR(KQUOTE)
      DO 10 I = 1, LIN
         IF (LENOUT.GE.MAXLM1) GO TO 50
         LENOUT = LENOUT + 1
         NAMOUT(LENOUT) = NAMIN(I)
         IF (NAMIN(I).EQ.ICHAR(KQUOTE)) THEN
            IF (LENOUT.GE.MAXLM1) GO TO 100
            LENOUT = LENOUT + 1
            NAMOUT(LENOUT) = ICHAR(KQUOTE)
         ENDIF
 10   CONTINUE

 50   LENOUT = LENOUT + 1
      NAMOUT(LENOUT) = ICHAR(KQUOTE)

 100  IF (IPAD.GT.0.AND.LOUT.GT.LENOUT) THEN
         DO 110 I = LENOUT + 1, LOUT
            NAMOUT(I) = KBLANK
 110     CONTINUE
         LENOUT = LOUT
      ELSE IF (IPAD.LT.0) THEN
C STOP LOOP AT 3 TO AVOID EMPTY STRINGS.
         DO 120 I = LENOUT-1, 3, -1
            IF (NAMOUT(I).NE.KBLANK) GOTO 1000
            NAMOUT(I) = ICHAR(KQUOTE)
            NAMOUT(I+1) = KBLANK
            LENOUT = I
 120     CONTINUE
      ENDIF

 1000 LOUT = LENOUT
      RETURN
      END
