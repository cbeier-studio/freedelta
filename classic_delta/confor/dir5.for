      SUBROUTINE BADNAM (INAM, NUMNAM, IDAT, LIDAT, LUNS, LRECS, IERRNO)    DIR5
 
C  REVISED 07-AUG-00.
C  OUTPUT  A LIST OF UNMATCHED TAXON NAMES.
C  USED IN ASSOCIATION WITH DIRECTIVES `TAXON IMAGES',
C  `ADD CHARACTERS', AND `EMPHASIZE CHARACTERS'.

C  INAM RECEIVES THE LIST OF POINTERS TO TAXON NAMES. IF THE NAME HAS BEEN
C   MATCHED, THE POINTER IS SET TO -1.
C  NUMNAM RECEIVES THE LENGTH OF INAM.
C  IDAT RECEIVES WORKING SPACE OF LENGTH LIDAT.
C  LIDAT RECEIVES THE LENGTH OF IDAT.
C  LUNS RECEIVES THE UNIT NUMBER WHICH THE RECORD POINTERS REFERENCE.
C  LRECS RECEIVES THE RECORD LENGTH OF LUNS.
C  IERRNO RECEIVES THE APPROPRIATE ERROR NUMBER.
 
      DIMENSION INAM(NUMNAM),IDAT(LIDAT)
 
      COMMON /LUNXXX/ LUNE,LUNL,LUNO,LUNP,LUNS1,LUNBO,LUNBI,LUNI,LUNDA,
     * LUNS2,LUNS3,LUNS4,LUNS5,LUNS6,LUNS7
 
      IFIRST = 1
      DO IT = 1, NUMNAM
        IF (INAM(IT).GT.0)  THEN
          IF (IFIRST.GT.0)  THEN
C            CALL MESSA (IERRNO, 4, 0)
            CALL MESSA2 (IERRNO, 103, 4, 0)
            IFIRST = 0
          ENDIF
C         READ NAME.
          KREC = INAM(IT)
          CALL RDDAI (LEN, 1, LUNS, LRECS, KREC)
          KREC = KREC + 1
          CALL RDDAI (IDAT, LEN, LUNS, LRECS, KREC)
          CALL WNAME (IDAT, LEN, IDUM, 1, 1, -1, 1, 0, 1)
          IF (LUNL.NE.LUNE)
     *     CALL WNAME (IDAT, LEN, IDUM, 1, 1, -1, 1, 0, 2)
        ENDIF
      END DO
 
      RETURN
      END
      SUBROUTINE CON5 (ICPH, JE)                                            DIR5
 
C* REVISED 17-AUG-98.
C* IDENTIFIES TYPE 5 CONTROL PHRASE.
 
C  ICPH. IF A CONTROL PHRASE IS FOUND, ICPH RETURNS ITS NUMBER.
C    OTHERWISE, IT RETURNS 0.
C  JE. IF A CONTROL PHRASE IS FOUND, JE RETURNS THE POSITION IN IBUF
C    IMMEDIATELY AFTER THE END OF THE PHRASE.
 
      CHARACTER*1 ICON(8,4)
C
      COMMON /DIR5XX/ NCON5,JDIR5(4)
      COMMON /INPXXX/ IBUF(121),JBUF,JBDAT,JEDAT,IDERR,NCERR,NSERR,NWERR
C
C     1 CHARACTER LIST
      DATA ICON(1,1),ICON(2,1),ICON(3,1),ICON(4,1),ICON(5,1),
     * ICON(6,1),ICON(7,1),ICON(8,1)/'C','H','L','I',' ',' ',' ',' '/
C     2 ITEM DESCRIPTIONS
      DATA ICON(1,2),ICON(2,2),ICON(3,2),ICON(4,2),ICON(5,2),
     * ICON(6,2),ICON(7,2),ICON(8,2)/'I','T','D','E',' ',' ',' ',' '/
C     3 KEY CHARACTER LIST
      DATA ICON(1,3),ICON(2,3),ICON(3,3),ICON(4,3),ICON(5,3),
     * ICON(6,3),ICON(7,3),ICON(8,3)/'K','E','C','H','L','I',' ',' '/
C     4 TRANSLATE IMPLICIT VALUES
      DATA ICON(1,4),ICON(2,4),ICON(3,4),ICON(4,4),ICON(5,4),
     * ICON(6,4),ICON(7,4),ICON(8,4)/'T','R','I','M','V','A',' ',' '/
C
      CALL CONPHR (ICON, 8, NCON5, 2, IBUF, JBUF+1, JEDAT-1, ICPH, JE)
      RETURN
      END
      SUBROUTINE DIR5 (IR, W, IW, LW, IC, JCSTR)                            DIR5
 
C* REVISED 29-JUN-00.
C* READS AND PROCESSES TYPE 5 DIRECTIVES.
C
C  IR RECEIVES 0 IF THE CALL IS TO CHECK FOR A TYPE-5 DIRECTIVE,
C    1 IF A CHARACTER-LIST DIRECTIVE IS ALREADY BEING PROCESSED, OR
C    2 IF AN ITEM-DESCRIPTIONS DIRECTIVE IS ALREADY BEING PROCESSED.
C    IR RETURNS 0 IF THE CURRENT DIRECTIVE IS NOT TYPE 5, THE DIRECTIVE
C    NUMBER IF PROCESSING OF A DIRECTIVE IS IN PROGRESS, OR MINUS THE
C    DIRECTIVE NUMBER IF PROCESSING OF A DIRECTIVE IS COMPLETE.
C  IC AND JCSTR STORE INFORMATION BETWEEN CALLS WHEN A CHARACTER-LIST
C    DIRECTIVE IS BEING PROCESSED. THEY MUST NOT BE
C    ALTERED IN THE CALLING PROGRAM WHILE IR.EQ.1.
C
C  ON ENTRY, JBUF MUST BE POSITIONED AT A BLANK-STAR.
C  IF A DIRECTIVE IS PROCESSED -
C    NEW RECORDS ARE READ AS REQUIRED.
C    JBUF IS POSITIONED AT THE NEXT BLANK-STAR OR BLANK-NUMERO.
C
      DIMENSION W(LW),IW(LW)
 
      COMMON /ADRXXX/ IITYPC,IIMC,IIMI,IWTC,IWTI,INSTAT,IKSTAT,
     * INEWOR,INDEC,IICDES,ILCDES,IITMAD,IWW1C,IWW2C,IWW1I,IWW2I,
     * IWW1S,IWW2S,IIDAT,IIDAM,IIDAV,IIPARA,IIEMPF,ILINKC,IICHHD,
     * IITSHD,IISBND,IIVCON,IICDEP,ILSTDE,INEWFL,IIMPL1,IIMPL2,
     * IIMPFL,IISUMM,IICPTW,IICPTB,IITPTR,ILNAME,IINTRL,IMANDC,IRBND,
     * INBND,IITXPT,INORNG,IIOMOR,IIFILS,IIREPS,IIADDT,IIADDC,IIEMPT,
     * IIEMPC,IMINC,IMAXC,INUMRN,INAFLG,ISCALF,IISRTS,IICNOT,IICNGP,
     * IITYMK,IIFMT,IIOMPD,IIOMLO,IICIMG,IICIGP,IITIMG,IITREC,IPCERR,
     * IABERR,IIOMFC,IIALTC,IIADNM,IIADDL,IIEMNM,IIEMPL,IIOUSP,IICSYN,
     * IILANG,IICSTR,IITHD,IITHREC,IICDNAM,IITFIL,IITFREC,IIXHD,IIXHREC,
     * IIFNT,IIUSECC,IIFOFSET,IITLNK,IILREC,IITLNK2,IINAUTOCC,IIOSUBJ,
     * ILAST
      COMMON /DIMXXX/ NC,MI,MS,LIDAT,LCSTR
      COMMON /DIR1XX/ NCON1,JDIR1(5)
      COMMON /DIR5XX/ NCON5,JDIR5(4)
      COMMON /HEDXXX/ LHEAD,IHEAD(200)
      COMMON /INIXXX/ JI,JT,JIM,IVARIT,MASTIN,MISTOP
      COMMON /INPFIL/ NINPUT
      COMMON /INPXXX/ IBUF(121),JBUF,JBDAT,JEDAT,IDERR,NCERR,NSERR,NWERR
      COMMON /INQXXX/ ISEQ,SEQ,LIBUF,MIREC,LISIND,LLUNI,JLIS,LISOUT(132)
      COMMON /LISXXX/ ILISTC,ILISTD,ILISTI,ILISTP,NEM(19),NEMM
      COMMON /LUNXXX/ LUNE,LUNL,LUNO,LUNP,LUNS1,LUNBO,LUNBI,LUNI,LUNDA,
     * LUNS2,LUNS3,LUNS4,LUNS5,LUNS6,LUNS7
      COMMON /LUOXXX/ NUN,LPAGE,LPRINT,LTOP,LPRDEF,LPUDEF,
     * LUNCOM(15),LUNPRE(15),LUNUSE(19),LUNREC(19),LUNPAG(19)
      COMMON /MISXXX/ IMPVAL,IPACH,IPCHN,IPUNC,IRAB,IKEYCH,ICMPRS,
     * ITUNC,ITINAP,ITIMPL,IUNVAR,LNKC,IDEPC,LICDEP,IPSUMM,ICHSEQ,
     * ITMSEQ,INSRVA,IFATT,ITINTR,ICMAND,IUNRNG,IOMTOR,NEWFLS,IRSEMI,
     * IOMSTC,IADDCH,IEMPCH,IVARUN,ISCALC,ICNOTE,ICIMGE,ITIMGE,MTIMGE,
     * NTIMGE,IOMNSC,IOMCMT,IOMLOW,IERRPC,IERRAB,ICHNSE,NUMST0,IUMEAN,
     * NADNAM,NEMNAM,NODELO,IOMUSP,ICKYIMG,ITKYIMG,ISUPIMG,ICTIMGE,
     * ICTNAME,IHTML,IRTF,MTHEAD,NTHEAD,ITMHDGS,LCDNAM,MTFILE,NTFILE,
     * ITMFILS,MXHEAD,NXHEAD,IDXHDGS,INSIMGFN,ICOFILE,IUCC,IOUNC,ITLINK,
     * MTLINK,NTLINK,NAUTOCC,IOUTSUBJ
      COMMON /TPSXXX/ ITPSET,NTYPMK,IFBEGIN,IFEND
      COMMON /TRNXXX/ IPCHAR,IPITEM,IPNAME,ITRAN
      COMMON /WRDSIZ/ NBITS,NCHRWD
 
      IF (IR.GT.0)  GO TO 90
C
C
C---  READ NEXT CONTROL PHRASE.
C
      CALL CON5 (ICPH, JE)
      IF (ICPH.LE.0)  GO TO 8500
C
C
C---  DIRECTIVE IDENTIFIED. INITIALIZE.
C
      IR = ICPH
      KBUF = JBUF
      JBUF = JE
      CALL CHKDIR (5, JDIR5, ICPH, W, IW, LW)
      IF (NCERR.NE.0)  GO TO 9000
      ILISTP = ILISTD
C     CHECK THAT NC, MS, MI HAVE BEEN SPECIFIED.
      IF (JDIR1(2).EQ.0.OR.JDIR1(3).EQ.0.OR.JDIR1(4).EQ.0)
     * CALL MESSA (36, -1, KBUF)
C     CHECK COMPATIBILITY OF HTML OPTION. ONLY VALID WITH NATURAL LANGUAGE
C      OR PRINT CHARACTER LIST.
      IF (IHTML.NE.0.AND.ITRAN.NE.4.AND.IPCHAR.EQ.0)  IHTML = 0
 
C     ITEM DESCRIPTIONS AND ALL CHARACTERS MASKED OUT?
      IF (IR.EQ.2.AND.NONZER(IW(IIMC),NC).EQ.0.AND.ITRAN.NE.4)  THEN
        CALL MESSA (25, 1, 0)
        GOTO 9000
      ENDIF
C
      GO TO (30,50,40,50), IR
C
C--   CHARACTER LIST.
   30 JDIR5(3) = 1                                                            =*
      ISEQ = -1
      SEQ = 0.
      GOTO 41
C
C     KEY CHARACTER LIST.
   40 JDIR5(1) = 1                                                            =*
      ISEQ = -1
      SEQ = 0.
      IKEYCH = 1
C
   41 IF (ILISTC.EQ.ILISTD)  GO TO 42
      IF (ILISTC.EQ.0)  CALL IPRT (2, -1)
      ILISTD = ILISTC
   42 IC = 0
      JCSTR = 0
C     TEST FOR INCLUSION DEPENDENT CHARACTERS DIRECTIVE.
      IF (NC.GT.20.AND.LICDEP.LE.20)  CALL MESSA(139, 4, 0)
      GO TO 8500
C
C--   ITEM DESCRIPTIONS.
   50 IF (ILISTI.EQ.ILISTD)  GO TO 52
      IF (ILISTI.EQ.0)  CALL IPRT (2, -1)
      ILISTD = ILISTI
   52 IF (JDIR5(1).NE.1 .AND. ITRAN.EQ.4)  GO TO 9010
      JI = 0
      JT = 0
      JIM = 0
      LFLG = 1
      ISEQ = -1
      SEQ = 0.
      JDIR5(ICPH) = 1                                                         =*
      GO TO 8500
 
C---  PROCESS DATA (OR NEXT PART OF DATA).
C
   90 GO TO (100,200,110,400), IR
C
C--   CHARACTER LIST.
  100 CALL RDCHAR (IW(IIDAT), LIDAT, IW(IITYPC), IW(INSTAT),
     * NC, MS, IKEYCH, IC, ICHAR)
      GOTO 120
C
C     KEY CHARACTER LIST.
  110 CALL RDCHAR (IW(IIDAT), LIDAT, IW(IITYPC), IW(IKSTAT),
     * NC, MS, IKEYCH, IC, ICHAR)
C
  120 IF (ICHAR.LT.0)  GO TO 180
      IF (ICHAR.GT.0)
     * CALL STOREC (IW(IIDAT),IW(IICSTR), IW(IILANG), LIDAT,
     * IW(IICDES),IW(ILCDES),NC,IC,JCSTR,LCSTR,LW)
      GO TO 8500
C
C     END OF CHARACTER LIST. TRANSLATE IF NO ERRORS.
  180 IF (IC.NE.NC)  CALL MESSB (135, NC, 1, 3, JBUF-1)
      IF (NCERR.EQ.0) THEN
        CALL TRANCH (IW(IITYPC), IW(IIMC), IW(INSTAT), IW(IKSTAT),
     *  IW(INEWOR), W(ISCALF), IW(IIALTC), IW(IICDES), IW(ILCDES),
     *  IW(IWW1C), IW(IWW2C), NC, IW(IWW1S), MS,
     *  IW(IICHHD), IW(IISBND), IW(IIVCON),
     *  IW(IICNOT), IW(IICNGP), IW(IIFMT), IW(IITYMK),
     *  IW(IICIMG), IW(IICIGP), IW(IICDNAM), IW(IIFNT), IW(IITSHD),
     *  IW(IIDAT), LIDAT,
     *  IW(IICSTR), LCSTR)
        IF (ISCALC.NE.0)  CALL MESSA (44, 2, 0)
      ENDIF
      GO TO 6000
C
C--   ITEM DESCRIPTIONS.
C
C     READ NEXT ITEM.
  200 CALL RDITEM (IW(IITYPC), IW(INSTAT), IW(IIMPL1), IW(IIMPL2),
     * IW(IIMPFL), IW(IITMAD), IW(IMANDC), IW(ILSTDE), W(ISCALF),
     * IW(IWW1C), IW(IWW2C), NC, IW(IICDEP), IW(IWW1S), IW(IWW2S), MS,
     * IW(IITIMG), IW(IITREC), IW(IIADNM), IW(IIADDT), IW(IIEMNM),
     * IW(IIEMPT), IW(IITHD), IW(IITHREC), IW(IITFIL), IW(IITFREC),
     * IW(IIXHD), IW(IIXHREC), IW(IITLNK), IW(IILREC),
     * IW(IIDAM), IW(IIDAV),
     * IW(IIDAT), IW(IITYMK), LIDAT,
     * JIDAT,JI,JT,IVARIT,MI,NIERR,INAME)
      IF (JI.GT.MI)  GO TO 240
      IF (INAME.GE.0)  GO TO 210
 
C     END OF ITEM DESCRIPTIONS.
 
C     REPORT UNMATCHED TAXON NAMES IN DIRECTIVES USING TAXON NAMES.
C     *** NOTE ***
C     THIS NAME CHECK MUST GO BEFORE THE FINAL CALL TO TRANIT WITH IVARIT=-1.
C     INTTI USES THE IITIMG ARRAY AS WORKING SPACE AND IT WILL NOT BE SENSIBLE
C     AFTERWARDS.
 
C     ADD CHARACTERS.
      IF (ITRAN.EQ.4.AND.NADNAM.GT.0)
     *  CALL BADNAM (IW(IIADNM), NADNAM, IW(IIDAT), LIDAT, LUNS7, 32,
     *  141)
C     EMPHASIZE CHARACTERS.
      IF (ITRAN.EQ.4.AND.NEMNAM.GT.0)
     *  CALL BADNAM (IW(IIEMNM), NEMNAM, IW(IIDAT), LIDAT, LUNS7, 32,
     *  142)
C     TAXON IMAGES.
      IF ((ITRAN.EQ.4.OR.ITRAN.EQ.9).AND.MTIMGE.GT.0)
     *  CALL BADNAM (IW(IITIMG), MTIMGE, IW(IIDAT), LIDAT, LUNS7, 32,
     *  140)
C     ITEM HEADINGS.
      IF (ITRAN.EQ.4.AND.MTHEAD.GT.0)
     *  CALL BADNAM (IW(IITHD), MTHEAD, IW(IIDAT), LIDAT, LUNS7, 32,
     *  155)
C     ITEM OUTPUT FILES.
      IF ((ITRAN.EQ.4.OR.ITRAN.EQ.9).AND.MTFILE.GT.0)
     *  CALL BADNAM (IW(IITFIL), MTFILE, IW(IIDAT), LIDAT, LUNS7, 32,
     *  160)
C     INDEX HEADINGS.
      IF (ITRAN.EQ.4.AND.MXHEAD.GT.0)
     *  CALL BADNAM (IW(IIXHD), MXHEAD, IW(IIDAT), LIDAT, LUNS7, 32,
     *  162)

  206 IF (IDERR.NE.0) GOTO 350
      IF (ITRAN.EQ.4) THEN
        IF (ITPSET.LE.0)  GOTO 350
      ELSEIF
     * (ITRAN.NE.1.AND.ITRAN.NE.2.AND.ITRAN.NE.9.AND.ITRAN.NE.10) THEN
        GO TO 350
      ENDIF
      IVARIT = -1
C      LFLG = (JT + NBITS - 1)/NBITS
      LFLG = (JIM + NBITS - 1)/NBITS
      GO TO 220
 
C  210 IF (JI.GT.MI)  GO TO 240
  210 IF (INAME.EQ.0)  GO TO 8500
      IF (IW(IIMI+JI-1).NE.0)  JIM = JIM + 1
      IF (IVARIT.EQ.0)  MASTIN = IW(IIMI+JI-1)
      IF (IDERR.NE.0) GOTO 225
 
C     TRANSLATE ITEM.
  220 CALL TRANIT (W, IW, LW, IW(IIDAT), IW(IIDAM), IW(IIDAV),
C    * IW(IWW1I), W(IWW2I),
     * IW(IITYPC),
     * IW(IIMC), W(IWTC), IW(INSTAT), IW(IKSTAT), IW(INORNG),
     * IW(IIOMOR),
C    * W(IWW1C), IW(IWW1C), IW(IWW2C),
     * IW(INDEC), IW(IICDES), IW(ILCDES), IW(IIPARA),
     * IW(IIEMPF), IW(ILINKC), IW(IIMPFL), IW(IITMAD), IW(IISRTS),
     * IW(IINTRL), IW(IIREPS), IW(IIOMPD),
     * IW(IIALTC), IW(IIOMFC), IW(IIOMLO),
C    * IW(IWW1S), IW(IWW2S),
     * IW(IITSHD), IW(IISUMM), IW(IISBND), IW(IIVCON),
     * IW(IICDEP), IW(ILSTDE),
     * IW(IICSTR), IW(IIMI), W(IWTI), IW(IIFILS), IW(IIADDT),
     * IW(IIADDC), IW(IIEMPT), IW(IIEMPC), IW(IICPTW), IW(IICPTB),
     * W(IPCERR), W(IABERR),
     * IW(IMINC), IW(IMAXC), IW(INUMRN),
     * IW(IITREC), IW(IITIMG),
     * IW(INAFLG), LFLG,
     * IW(IITPTR), IW(ILNAME), IW(INBND), W(IRBND), IW(IITXPT),
     * IW(IITYMK))
      IF (IVARIT.LT.0)  GO TO 350
  225 IF (MISTOP.GT.0.AND.JI.GE.MISTOP)  THEN
        CALL MESSB (45, JI, 1, 2, 0)
        LUNI = LUNPRE(8)
        NINPUT = NINPUT - 1
        JBUF = JEDAT
        ISEQ = 0
        GOTO 206
      ENDIF
C
      GO TO 8500
C
C     TOO MANY ITEMS.
  240 JI = JI - 1
      CALL MESSA (46, 1, 0)
      LUNI = LUNPRE(8)
      JBUF = JEDAT
      ISEQ = 0
 
C--   END OF ITEMS.
 
C     ADD TERMINATING TYPSETTING MARK TO PRINT FILE.
  350 IF (ITPSET.GT.0.AND.IFBEGIN.NE.0.AND.IFEND.EQ.0) THEN
        CALL JSTTPS (29, IW(IITYMK), LIDAT, NTYPMK, 3)
        CALL ENDLN(3)
        IFEND = 1
      ENDIF
 
      IF (IPSUMM.NE.0)  CALL PRTSUM ( IW(IISUMM), IW(IISBND), LIDAT,
     *  IW(INSTAT), IW(IKSTAT), IW(IITYPC), IW(IIMC), NC, JI, JIM)
      IF (ITRAN.NE.0.AND.ISCALC.NE.0)  CALL MESSA (44, 2, 0)
      IF (ITRAN.EQ.3) THEN
        IF (JIM.NE.JI) CALL MESSA (47, 2, 0)
        IF (NONZER(IW(IIMC),NC).NE.NC)  CALL MESSA (48, 2, 0)
        IF (ITPSET.LT.0)  CALL MESSA (49, 2, 0)
      ENDIF
      GOTO 6000
 
C     TRANSLATE IMPLICIT VALUES.
  400 IF (IMPVAL.NE.0) CALL TRIMPVAL (IW, LW)
      GOTO 6000
 
C---  DIRECTIVE COMPLETE.
C
 6000 IF (IDERR.NE.0)  CALL SKDELW (ITERM)
      CALL CHDELW (0)
      ILISTD = ILISTP
      IR = -IR
C
C---
 8500 RETURN
C
C
C---  FATAL ERRORS.
 9000 CALL MESSA (4, 1, 0)
      NCERR = NCERR - 1
      GO TO 9500
 9010 CALL MESSA (50, 1, 0)
 9500 CALL EXTERM
      END
      SUBROUTINE PRTSUM (ISUMM, ISBND, LIDAT, NSTAT, KSTAT, ITYPC,          DIR5
     * IMC, NC, JI, JIM)
C
C* REVISED 6/7/87.
C  PRINT SUMMARY STATISTICS.
C
C  ISUMM RECEIVES THE SUMMARY STATISTICS.
C  ISBND RECEIVES THE KEY STATE BOUNDARIES.
C  LIDAT RECEIVES THE LENGTH OF ISUMM AND ISBND.
C  NSTAT RECEIVES THE NUMBER OF STATES.
C  KSTAT RECEIVES THE NUMBER OF KEY STATES.
C  ITYPC RECEIVES THE CHARACTER TYPES.
C  IMC RECEIVES THE CHARACTER MASK.
C  NC RECEIVES THE NUMBER OF CHARACTERS.
C  JI RECEIVES THE NUMBER OF ITEMS.
C  JIM RECEIVES THE NUMBER OF MASKED-IN ITEMS.
C
C
      DIMENSION ISUMM(LIDAT),ISBND(LIDAT),NSTAT(NC),KSTAT(NC),
     * ITYPC(NC),IMC(NC),IBF(80)
C
      COMMON /BLKXXX/ KBLANK
      COMMON /HEDXXX/ LHEAD,IHEAD(200)
      COMMON /TCHXXX/ NTCOD,ITCOD(2,7),JTCOD(7)
C
      LUNTYP = 3
      IBF(1) = KBLANK
C     SET START POSITIONS OF OUTPUT FIELDS.
      JBF1 = 2                                                                =*
      JBF2 = 6                                                                =*
      JBF3 = 24                                                               =*
      JBF4 = 33                                                               =*
      JBF5 = 39                                                               =*
C
C
C     HEADING.
C     (NOTE: CANNOT USE PRINT DIRECTIVES FOR HEADING BECAUSE SUMMARY IS DONE AT
C     END OF ITEMS FILE.)
      CALL SENSIM (IHEAD(2), LHEAD, IBF(JBF1), 79, 1, JE, 0, 0)
      CALL WRTREC (IBF, JE+1, LUNTYP, 4)
      CALL BLKLIN (1, 0, LUNTYP)
      CALL SETIA (IBF, 80, KBLANK)
      CALL PUTWD (IBF, 14, JBF1, JE)
      CALL WRTREC (IBF, JE, LUNTYP, 4)
      CALL BLKLIN (1, 0, LUNTYP)
C
      CALL SETIA (IBF, 80, KBLANK)
C
C     CHARACTERS.
      CALL PUTIWD (IBF, 2, JBF1, NC, 12, 0, 0, LUNTYP)
      INC = NONZER (IMC, NC)
      CALL PUTIWD (IBF, 12, 21, INC, 25, 0, 0, LUNTYP)
      CALL PUTWD (IBF, 5, 34, JE)
      CALL WRTREC (IBF, JE, LUNTYP, 4)
C
C     ITEMS.
      CALL SETIA (IBF, JE, KBLANK)
      CALL PUTIWD (IBF, 4, JBF1, JI, 12, 0, 0, LUNTYP)
      CALL PUTIWD (IBF, 12, 21, JIM, 25, 0, 0, LUNTYP)
      CALL PUTWD (IBF, 5, 34, JE)
      CALL WRTREC (IBF, JE, LUNTYP, 4)
 
C     FOR EACH CHARACTER.
      DO 1000 IC = 1, NC
        JBF1 = 2
        IF (IMC(IC).EQ.0)  GO TO 1000
        CALL BLKLIN (1, 0, LUNTYP)
        CALL SETIA (IBF, 80, KBLANK)
        IKSTAT = 0
        JISUM = ISUMM(IC)
        JTYPC = ITYPC(IC)
        DO 100 IT = 1, NTCOD
          IF (JTYPC.EQ.JTCOD(IT))  GO TO 110
  100     CONTINUE
  110   CALL PUTIWD (IBF, 1, JBF1, IC, JBF3, 0, 1, LUNTYP)
        JBF1 = JBF1 + 2
        CALL PUTWD (IBF, 16, JBF1, JE)
        JBF = JBF3 + 6
        CALL COPIA (ITCOD(1,IT), IBF(JBF), 2)
        JBF = JBF + 2
        CALL WRTREC (IBF, JBF, LUNTYP, 4)
        CALL SETIA (IBF, 80, KBLANK)
C
C       UNCODED OR UNKNOWN.
        CALL PUTIWD (IBF, 17, JBF1, ISUMM(JISUM), JBF3, 0, 1, LUNTYP)
        IF (JTYPC.EQ.5)  GO TO 1000
C
C       NOT APPLICABLE.
        CALL PUTIWD (IBF, 11, JBF1, ISUMM(JISUM+1), JBF3, 0, 1, LUNTYP)
C
C       NO. CODED.
        ICODED = ISUMM(JISUM+2)
C
        IF (ICODED.LE.0)  GOTO 1000
C
        IF (JTYPC.GE.3)  GO TO 300
C
C       MULTISTATE.
        NS = NSTAT(IC)
C       NUMBER OF STATES.
        CALL PUTIWD (IBF, 10, JBF1, NS, JBF3, 0, 1, LUNTYP)
        IB = JISUM + 3
  145   NV = ISUMM(IB)
C       DISTRIBUTION OF STATES.
        CALL PUTWD (IBF, 3, JBF1, JE)
        JBF = JBF3 + 3
        N = 0
        NOUT = 0
        DO 200 IS = 1, NS
          IVAL = ISUMM(IB+IS)
          CALL JNKOD (IVAL, IBF(JBF), 5)
          N = N + IVAL
          NOUT = NOUT + 1
          JBF = JBF + 5
          IF (NOUT.LT.10)  GO TO 200
            CALL WRTREC (IBF, JBF, LUNTYP, 4)
            CALL SETIA (IBF, JBF, KBLANK)
            NOUT = 0
            JBF = JBF3 + 3
  200     CONTINUE
        IF (NOUT.EQ.0)  GO TO 210
        CALL WRTREC(IBF, JBF-1, LUNTYP, 4)
        CALL SETIA (IBF, JBF-1, KBLANK)
 
C       NO. OF CODED ITEMS.
  210   CALL PUTIWD (IBF, 15, JBF1, ICODED, JBF3, 0, 1, LUNTYP)
C       NO. OF VARIABLE ITEMS.
        CALL PUTIWD (IBF, 20, JBF1, NV, JBF3, 0, 1, LUNTYP)
        IF (IKSTAT.NE.0)  GO TO 1000
        GO TO 400
C
C       NUMERIC.
  300   ITMIN = ISUMM(JISUM+3)
        ITMAX = ISUMM(JISUM+4)
        IB = JISUM + 5
        VMIN = RELIN(ISUMM(IB))
        IB = IB + 1
        VMAX = RELIN(ISUMM(IB))
        IB = IB + 1
        VSUM = RELIN(ISUMM(IB))
        IB = IB + 1
        VSSQ = RELIN(ISUMM(IB))
        VMEAN = 0.0
        STDDEV = 0.0
        IF(ICODED.LE.0)  GOTO 330
        VMEAN = VSUM/FLOAT(ICODED)
        IF (ICODED.LE.1)  GOTO 330
        STDDEV =
     *   SQRT( 1.0/FLOAT(ICODED-1)*(VSSQ-VSUM*VSUM/FLOAT(ICODED)) )
C
C       ITEMS CODED.
  330   CALL PUTIWD (IBF, 15, JBF1, ICODED, JBF3, 0, 1, LUNTYP)
 
C       MEAN.
        CALL PUTRWD (IBF, 7, JBF1, VMEAN, JBF3, 0, 1, LUNTYP)
 
C       STANDARD DEVIATION.
        CALL PUTRWD (IBF, 13, JBF1, STDDEV, JBF3, 0, 1, LUNTYP)
 
C       MINIMUM.
        CALL PUTRWD (IBF, 8, JBF1, VMIN, JBF3, 0, 0, LUNTYP)
        CALL PUTIWD (IBF, 18, JBF4, ITMIN, JBF5, 1, 1, LUNTYP)
 
C       MAXIMUM.
        CALL PUTRWD (IBF, 6, JBF1, VMAX, JBF3, 0, 0, LUNTYP)
        CALL PUTIWD (IBF, 18, JBF4, ITMAX, JBF5, 1, 1, LUNTYP)
C
C
C       KEY STATES.
  400   IF (ISBND(IC).EQ.0)  GO TO 1000
          IKSTAT = 1
          NS = KSTAT(IC)
          CALL PUTIWD (IBF, 9, JBF1, NS, JBF3, 0, 1, LUNTYP)
          IF (JTYPC.GE.3)  GO TO 420
            IB = JISUM + 4 + NSTAT(IC)
            GO TO 425
C
  420     IB = JISUM + 9
  425     GO TO 145
C
 1000   CONTINUE
C
      RETURN
      END
      SUBROUTINE PUTIWD (IBF, NWD, JBF1, IVAL, JBF2, JST, NEWLIN,           DIR5
     * LUNTYP)
C
C     REVISED 27/8/84.
C     PUTS A WORD AND AN INTEGER IN AN ARRAY.
C
C  IBF RECEIVES THE ARRAY.
C  NWD RECEIVES THE NUMBER OF REQUIRED WORD.
C  JBF1 RECEIVES THE START POSITION OF THE WORD.
C  IVAL RECEIVES THE INTEGER VALUE.
C  JBF2 RECEIVES THE START POSITION OF THE INTEGER FIELD.
C  JST RECEIVES 0 IF NUMBER IS TO BE RIGHT-JUSTIFIED, 1 IF LEFT-JUSTIFIED.
C  NEWLIN RECEIVES 1 IF ARRAY IS TO BE WRITTEN, 0 OTHERWISE.
C  LUNTYP RECEIVES THE TYPE OF LOGICAL UNIT FOR OUTPUT.
C
      DIMENSION IBF(80)
C
      COMMON /BLKXXX/ KBLANK
C
      CALL PUTWD (IBF, NWD, JBF1, JE)
      IF (JST.GT.0)  GO TO 50
C
C     RIGHT-JUSTIFIED.
      CALL JNKOD (IVAL, IBF(JBF2), 8)
      JE = JBF2 + 7
      GO TO 60
C
C     LEFT-JUSTIFIED.
   50 CALL INKOD (IVAL, IBF(JBF2), NBF, 8)
      JE = JBF2 + NBF
      IF (NWD.EQ.18)  CALL PUTWD (IBF, 19, JE, JE)
C
   60 IF (NEWLIN.EQ.0)  GO TO 100
      CALL WRTREC (IBF, JE, LUNTYP, 4)
      CALL SETIA (IBF, JE, KBLANK)
C
  100 RETURN
      END
      SUBROUTINE PUTRWD (IBF, NWD, JBF1, RVAL, JBF2, JST, NEWLIN,           DIR5
     * LUNTYP)
 
C  REVISED 14-MAR-91.
C  PUTS A WORD AND A REAL VALUE IN AN ARRAY.
 
C  IBF RECEIVES THE ARRAY.
C  NWD RECEIVES THE NUMBER OF REQUIRED WORD.
C  JBF1 RECEIVES THE START POSITION OF THE WORD.
C  RVAL RECEIVES THE VALUE.
C  JBF2 RECEIVES THE START POSITION OF THE REAL FIELD.
C  JST RECEIVES 0 IF NUMBER IS TO BE RIGHT-JUSTIFIED, 1 IF LEFT-JUSTIFIED.
C  NEWLIN RECEIVES 1 IF ARRAY IS TO BE WRITTEN, 0 OTHERWISE.
C  LUNTYP RECEIVES THE TYPE OF LOGICAL UNIT FOR OUTPUT.
 
      DIMENSION IBF(80)
 
      COMMON /BLKXXX/ KBLANK
 
      CALL PUTWD (IBF, NWD, JBF1, JE)
      IF (JST.GT.0)  GO TO 50
 
C     RIGHT-JUSTIFIED.
      CALL SNKOD (RVAL, -3, IBF(JBF2), 8, 0)
      JE = JBF2 + 7
      GO TO 60
C
C     LEFT-JUSTIFIED.
   50 CALL RNKOD (RVAL, -3, IBF(JBF2), NBF, 8, 0)
      JE = JBF2 + NBF - 1
C
   60 IF (NEWLIN.EQ.0)  GO TO 100
      CALL WRTREC (IBF, JE, LUNTYP, 4)
      CALL SETIA (IBF, JE, KBLANK)
C
  100 RETURN
      END
      SUBROUTINE PUTWD (IBF, NW, JB, JE)                                    DIR5
C
C  REVISED 24-AUG-00.
C  PUTS SPECIFIED WORD IN AN ARRAY.
C
C  IBF RECEIVES AND RETURNS THE ARRAY.
C  NW RECEIVES THE NUMBER OF THE WORD TO BE OUTPUT.
C  JB RECEIVES THE START POSITION OF THE WORD IN THE ARRAY.
C  JE RETURNS THE LAST POSITION USED IN THE ARRAY.
C
      DIMENSION IBF(80),LWD(22),IWORD(25)
      CHARACTER*25 K(22)
C
C     NWDS MUST EQUAL THE DIMENSION OF LWD AND K.                             =/
      DATA NWDS /22/                                                          =*
C     MWL MUST BE GREATER THAN OR EQUAL TO THE MAXIMUM NUMBER OF SYMBOLS      =/
C       IN A WORD, AND MUST BE EQUAL TO THE DIMENSION OF IWORD.               =/
      DATA MWL /25/                                                           =*
C
C     LWD MUST CONTAIN THE LENGTHS OF THE WORDS IN K.                         =/
      DATA LWD /9,10,22,5,9,7,4,7,10,16,                                     =*
     *          14,4,14,8,11,4,18,5,1,14,                                     =*
     *          4,4/                                                          =*
C
C
C     1 CHARACTER
      DATA K(1) /'Character'/
C     2 CHARACTERS
      DATA K(2) /'Characters'/
C     3 DISTRIBUTION
      DATA K(3) /'Distribution of states'/
C     4 ITEMS
      DATA K(4) /'Items'/
C     5 MASKED IN.
      DATA K(5) /'Included.'/
C     6 MAXIMUM
      DATA K(6) /'Maximum'/
C     7 MEAN
      DATA K(7) /'Mean'/
C     8 MINIMUM
      DATA K(8) /'Minimum'/
C     9 KEY STATES
      DATA K(9) /'Key states'/
C     10 NUMBER OF STATES
      DATA K(10) /'Number of states'/
C     11 NOT APPLICABLE
      DATA K(11) /'Not applicable'/
C     12 READ
      DATA K(12) /'Read'/
C     13 STD.DEVIATION
      DATA K(13) /'Std deviation'/
C     14 SUMMARY.
      DATA K(14) /'Summary.'/
C     15 ITEMS CODED
      DATA K(15) /'Items coded'/
C     16 TYPE
      DATA K(16) /'Type'/
C     17 UNCODED OR UNKNOWN
      DATA K(17) /'Uncoded or unknown'/
C     18 (ITEM
      DATA K(18) /'(Item'/
C     19 )
      DATA K(19) /')'/
C     20 ITEMS VARIABLE
      DATA K(20) /'Items variable'/
C     21 _OR_
      DATA K(21) /' or '/
C     22 _TO_
      DATA K(22) /' to '/
C
      IF (NW.LE.0.OR.NW.GT.NWDS)  CALL BUG (24, NW)
      L = LWD(NW)
      IF (L.LE.0.OR.L.GT.MWL)  CALL BUG (25, NW)
      DO 10 IL = 1, L
        IWORD(IL) = ICHAR (K(NW)(IL:IL))
   10   CONTINUE
      CALL COPIA (IWORD, IBF(JB), L)
      JE = JB + L - 1
      RETURN
      END
      SUBROUTINE TRIMPVAL (IW, LW)
 
C  REVISED 19-AUG-98.
C  OUTPUTS A DESCRIPTION CONSISTING OF IMPLICIT VALUES (ATTRIBUTES) ONLY.
 
      COMMON /ADRXXX/ IITYPC,IIMC,IIMI,IWTC,IWTI,INSTAT,IKSTAT,
     * INEWOR,INDEC,IICDES,ILCDES,IITMAD,IWW1C,IWW2C,IWW1I,IWW2I,
     * IWW1S,IWW2S,IIDAT,IIDAM,IIDAV,IIPARA,IIEMPF,ILINKC,IICHHD,
     * IITSHD,IISBND,IIVCON,IICDEP,ILSTDE,INEWFL,IIMPL1,IIMPL2,
     * IIMPFL,IISUMM,IICPTW,IICPTB,IITPTR,ILNAME,IINTRL,IMANDC,IRBND,
     * INBND,IITXPT,INORNG,IIOMOR,IIFILS,IIREPS,IIADDT,IIADDC,IIEMPT,
     * IIEMPC,IMINC,IMAXC,INUMRN,INAFLG,ISCALF,IISRTS,IICNOT,IICNGP,
     * IITYMK,IIFMT,IIOMPD,IIOMLO,IICIMG,IICIGP,IITIMG,IITREC,IPCERR,
     * IABERR,IIOMFC,IIALTC,IIADNM,IIADDL,IIEMNM,IIEMPL,IIOUSP,IICSYN,
     * IILANG,IICSTR,IITHD,IITHREC,IICDNAM,IITFIL,IITFREC,IIXHD,IIXHREC,
     * IIFNT,IIUSECC,IIFOFSET,IITLNK,IILREC,IITLNK2,IINAUTOCC,IIOSUBJ,
     * ILAST
      COMMON /DIMXXX/ NC,MI,MS,LIDAT,LCSTR
      COMMON /INIXXX/ JI,JT,JIM,IVARIT,MASTIN,MISTOP
      COMMON /LUNXXX/ LUNE,LUNL,LUNO,LUNP,LUNS1,LUNBO,LUNBI,LUNI,LUNDA,
     * LUNS2,LUNS3,LUNS4,LUNS5,LUNS6,LUNS7
      COMMON /MISXXX/ IMPVAL,IPACH,IPCHN,IPUNC,IRAB,IKEYCH,ICMPRS,
     * ITUNC,ITINAP,ITIMPL,IUNVAR,LNKC,IDEPC,LICDEP,IPSUMM,ICHSEQ,
     * ITMSEQ,INSRVA,IFATT,ITINTR,ICMAND,IUNRNG,IOMTOR,NEWFLS,IRSEMI,
     * IOMSTC,IADDCH,IEMPCH,IVARUN,ISCALC,ICNOTE,ICIMGE,ITIMGE,MTIMGE,
     * NTIMGE,IOMNSC,IOMCMT,IOMLOW,IERRPC,IERRAB,ICHNSE,NUMST0,IUMEAN,
     * NADNAM,NEMNAM,NODELO,IOMUSP,ICKYIMG,ITKYIMG,ISUPIMG,ICTIMGE,
     * ICTNAME,IHTML,IRTF,MTHEAD,NTHEAD,ITMHDGS,LCDNAM,MTFILE,NTFILE,
     * ITMFILS,MXHEAD,NXHEAD,IDXHDGS,INSIMGFN,ICOFILE,IUCC,IOUNC,ITLINK,
     * MTLINK,NTLINK,NAUTOCC,IOUTSUBJ
 
      DIMENSION IW(LW)
 
C     Generate a pseudo-item and output it in natural language.
 
      DO IC = 1, NC
        IW(IIDAT+IC-1) = 0
      ENDDO
 
C     Create an item name - "Implicit_Attributes".
      IW(IIDAT+NC+1) = 22
      IW(IIDAT+NC+2) = 21
      IW(IIDAT+NC+3) = 1
      CALL COPSIA ('Implicit_Attributes', IW(IIDAT+NC+4), 19)
      IW(IIDAT+NC) = 23
 
      CALL SETIMP (IW(IIDAT), LIDAT, IW(IIMPL1), IW(IIMPL2), IW(IWW1C),
     * NC)
 
      CALL CHECKO (LUNO, 'PRINT')
 
      DO I = 1, NC
        IW(IWW1C+I-1) = 0
      ENDDO
      DO I = 1, MI
        IW(IWW1I+I-1) = 0
      ENDDO
 
C     Need to temporarily set some variables so NATTI can treat this as an
C     ordinary item.
 
      JISV = JI
      JI = 1
      INC = IW(IIMI)
      IW(IIMI) = 1
      IVARIT = 0
 
      CALL NATTI (IW(IIDAT), IW(IIDAM), IW(IIDAV), IW(IITYPC), IW(IIMC),
     * IW(INSTAT), IW(INDEC),
     * IW(IICDES), IW(ILCDES), IW(IIPARA), IW(IIEMPF), IW(ILINKC),
     * IW(IIOMOR), IW(IIREPS), IW(IIOMPD),
     * IW(IIALTC), IW(IIOMFC), IW(IIOMLO), IW(IIOUSP),
     * IW(IWW1S), IW(IIMI), IW(IWW1I), IW(IITSHD), IW(IICSTR),
     * IW(IWW1C), IW(IWW1C), IW(IWW1I),
     * IW(IWW1C), IW(IWW1I), IW(IWW1C), IW(IITYMK), IW(IILANG),
     * IW(IWW1I), IW(IWW1I), IW(IWW1I), IW(IIFOFSET), 3)
 
      JI = JISV
      IW(IIMI) = INC
 
      RETURN
      END
