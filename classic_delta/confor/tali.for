      SUBROUTINE ALICHA (ITYPC, NSTAT, KSTAT, ICDES, LCDES, NC, IKEYCH,     TALI
     * KCOM, IAS, MS, ISBND, LIDAT, ICSTR, LCSTR, IC, ICM, KTYPE)
 
C* REVISED 12-MAY-92.
C* OUTPUTS A CHARACTER DESCRIPTION IN ALICE TRANSFER FORMAT.
 
C  ITYPC RECEIVES THE CHARACTER TYPES.
C  NSTAT RECEIVES THE NUMBERS OF STATES.
C  KSTAT RECEIVES THE NUMBERS OF KEY STATES.
C  ICDES RECEIVES THE STARTING POSITIONS OF THE CHARACTER DESCRIPTIONS.
C  LCDES RECEIVES THE LENGTHS OF THE CHARACTER DESCRIPTIONS.
C  NC RECEIVES THE NUMBER OF CHARACTERS.
C  IKEYCH RECEIVES WHETHER THIS IS A KEY CHARACTER LIST.
C  KCOM RECEIVES THE COMMA CHARACTER TO BE USED TO SEPARATE STATE DESCRIPTIONS.
C  IAS RECEIVES WORKING SPACE OF LENGTH MS.
C  MS RECEIVES THE MAXIMUM NUMBER OF STATES.
C  ISBND RECEIVES THE NEW STATE BOUNDARIES.
C  LIDAT RECEIVES THE DATA BUFFER LENGTH.
C  ICSTR. IF ISTYPE.EQ.1, ICSTR RECEIVES THE CHARACTER DESCRIPTIONS.
C    IF ISTYPE.NE.1, ICSTR IS WORKING SPACE. SEE SUBR. FETCHC.
C  LCSTR RECEIVES THE DIMENSION OF ICSTR.
C  IC RECEIVES THE CHARACTER NUMBER.
C
      DIMENSION ITYPC(NC),NSTAT(NC), KSTAT(NC),
     * ICDES(NC),LCDES(NC),IAS(MS),ISBND(LIDAT),ICSTR(LCSTR),KTYPE(8)
 
      COMMON /BLKXXX/ KBLANK
      COMMON /JSTXXX/ IOUT(132,5),LOUT,ICAP,
     * JIOUT(5),IENDWD(5),INDEN(5),LWIDTH(5),PSEQ,SEQINC,NSQDIG
      COMMON /SYMXXX/ KPOINT,KDASH,KSTAR,KVERT,KEQUAL,KCOMMA,KSEMIC,
     * KCOLON,KSTOP,KSOL,KLPAR,KRPAR,KDOLLA,KQUEST,KEXCL,KAT,KLBRACE,
     * KRBRACE
C
 
C---  GET CHARACTER DESCRIPTION.
      CALL FETCHC (ICSTR, LCSTR, ICDES, LCDES, NC, IC, IAC, IAS, MS)
C
      JTYPC = IABS(ITYPC(IC))
      NS = KSTAT(IC)
      LUNTYP = 4
 
C---  CHARACTER NO.
      CALL JNKOD (ICM, IOUT(1,LUNTYP), 6)
 
C---  FEATURE.
      CALL SENSIM (ICSTR(IAC), LCSTR, IOUT(7,LUNTYP), 50, 50, JBF, 1, 0)
 
C---  STATES.
      JSG = ISBND(IC) + 1
 
      DO 600 JS = 1, NS
        CALL JNKOD (JS, IOUT(57,LUNTYP), 6)
        JB = 62
        LL = 50
  
  150   IF (ISBND(IC).GT.0.AND.IKEYCH.EQ.0)  GOTO 200
 
C--     ORIGINAL STATES.
        I = IAS(JS)
        CALL SENSIM (ICSTR(I), LCSTR, IOUT(JB+1,LUNTYP), 50, 50, JBF,
     *   0, 0)
        GOTO 500
 
C--     NEW STATES.
  200   NB = JSG + 2
        NE = JSG + ISBND(JSG) - 1
        ITS = ISBND(JSG+1)
        IF (JTYPC.GE.3)  GOTO 300
 
C-      MULTISTATE.
        DO 230 J = NB, NE
          IS = ISBND(J)
          I = IAS(IS)
          CALL SENSIM (ICSTR(I), LCSTR, IOUT(JB+1,LUNTYP), LL, 1, LBF,
     *     0, 0)
          JB = JB + LBF
          LL = LL - LBF
          IF (J.EQ.NE)  GO TO 230
          IF (JTYPC.EQ.2) THEN
            IWD = 2
          ELSE
            CALL OUTWRD (KCOM, IOUT(1,LUNTYP), LIDAT, JB, LL)
            IWD = 1
          ENDIF
          CALL OUTSYM (KBLANK, IOUT(1,LUNTYP), JB, LL)
          CALL OUTWRD (IWD, IOUT(1,LUNTYP), LIDAT, JB, LL)
  230     CONTINUE
        GO TO 400
 
C-      NUMERIC.
  300   IF (NSTAT(IC).EQ.1)  I1 = IAS(1)
        IF (JTYPC.EQ.4)  GO TO 310
        VMIN = ISBND(NB)
        VMAX = ISBND(NE)
        GO TO 320
  310   VMIN = RELIN (ISBND(NB))
        VMAX = RELIN (ISBND(NE))
C
 320    IF (NE.GT.NB)  GO TO 340
C       ONE VALUE.
        IF (JS.EQ.1.AND.ITS.EQ.3)  CALL OUTWRD (12, IOUT(1,LUNTYP),
     *   LIDAT, JB, LL)
        CALL OUTNUM (VMIN, IOUT(1,LUNTYP), JB, LL, 1)
        IF (NSTAT(IC).EQ.1)  THEN
          CALL SENSIM (ICSTR(I1), LCSTR, IOUT(JB+1,LUNTYP), LL, 1, LBF,
     *     0, 0)
          JB = JB + LBF
          LL = LL - LBF
          CALL OUTSYM (KBLANK, IOUT(1,LUNTYP), JB, LL)
        ENDIF
        IF (JS.EQ.NS.AND.ITS.EQ.3)
     *   CALL OUTWRD (13, IOUT(1,LUNTYP), LIDAT, JB, LL)
        GO TO 390
C
C       MORE THAN ONE VALUE.
  340   CALL OUTNUM (VMIN, IOUT(1,LUNTYP), JB, LL, 1)
        CALL OUTWRD (2, IOUT(1,LUNTYP), LIDAT, JB, LL)
        CALL OUTNUM (VMAX, IOUT(1,LUNTYP), JB, LL, 1)
        IF (NSTAT(IC).EQ.1)  THEN
          CALL SENSIM (ICSTR(I1), LCSTR, IOUT(JB+1,LUNTYP), LL, 1, LBF,
     *     0, 0)
          JB = JB + LBF
          LL = LL - LBF
          CALL OUTSYM (KBLANK, IOUT(1,LUNTYP), JB, LL)
        ENDIF
  390   JB = JB - 1
C--
  400   IF (ISBND(IC).GT.0)  JSG = JSG + ISBND(JSG)
C       BLANK FILL FIELD.
        DO I = JB+1,112
          IOUT(I,LUNTYP) = KBLANK
        END DO
 
C       OUTPUT CHARACTER TYPE.
  500   IOUT(113,LUNTYP) = KBLANK
        IOUT(114,LUNTYP) = KBLANK
        IOUT(115,LUNTYP) = KTYPE(ITYPC(IC)+3)
        CALL WRTREC (IOUT(1,LUNTYP), 115, LUNTYP, 4)
 
  600 CONTINUE
C---
      RETURN
      END
      SUBROUTINE ALICTC (ITYPC, NSTAT, KSTAT, IMC, IALTC, ICDES, LCDES,     TALI
     * NC, IKEYCH, MM1S, MS, ISBND, LIDAT, ICSTR, LCSTR)
 
C* REVISED 3-AUG-92.
C* OUTPUTS CHARACTER LIST IN ALICE TRANSFER FORMAT.
 
C  ITYPC RECEIVES THE CHARACTER TYPES.
C  NSTAT RECEIVES THE NUMBERS OF STATES.
C  KSTAT RECEIVES THE NUMBERS OF KEY STATES.
C  IMC RECEIVES THE CHARACTER MASK.
C  IALTC RECEIVES WHETHER TO USE THE ALTERNATE COMMA CHARACTER.
C  ICDES RECEIVES THE STARTING POSITIONS OF THE CHARACTER DESCRIPTIONS.
C  LCDES RECEIVES THE LENGTHS OF THE CHARACTER DESCRIPTIONS.
C  NC RECEIVES THE NUMBER OF CHARACTERS.
C  IKEYCH RECEIVES WHETHER A KEY CHARACTER LIST IS BEING USED.
C  MM1S RECEIVES WORDING SPACE OF LENGTH MS.
C  MS RECEIVES THE MAXIMUM NUMBER OF STATES.
C  ISBND RECEIVES THE NEW STATE BOUNDARIES.
C  LIDAT RECEIVES THE DATA BUFFER LENGTH.
C  ICSTR. IF ISTYPE.EQ.1, ICSTR RECEIVES THE CHARACTER DESCRIPTIONS.
C    IF ISTYPE.NE.1, ICSTR IS WORKING SPACE. SEE SUBR. FETCHC.
C  LCSTR RECEIVES THE DIMENSION OF ICSTR.
 
      COMMON /ALPXXX/ KA,KB,KC,KD,KE,KF,KG,KH,KI,KJ,KK,KL,KM,
     *                KN,KO,KP,KQ,KR,KS,KT,KU,KV,KW,KX,KY,KZ
      COMMON /BLKXXX/ KBLANK
      COMMON /VLWXXX/ NVWD,MAXVWD,LVWD(18),IBPUNC,IEPUNC,
     * KVSTOP,KVCOM1,KVCOM2,KVSEMI,KVDEC
 
      DIMENSION ITYPC(NC),NSTAT(NC),KSTAT(NC),IMC(NC),IALTC(NC),
     * ICDES(NC),LCDES(NC),MM1S(MS),ISBND(LIDAT),ICSTR(LCSTR)
 
      DIMENSION KTYPE(8)
 
C     ALICE TYPES. A=OM, B=UM, C=EOM, D=EUM.
      KTYPE(1) = KC
      KTYPE(2) = KD
      KTYPE(3) = KBLANK
      KTYPE(4) = KB
      KTYPE(5) = KA
      KTYPE(6) = KA
      KTYPE(7) = KA
      KTYPE(8) = KBLANK

      ICM = 0
      DO 100 IC = 1, NC
        IF (IMC(IC).EQ.0)  GOTO 100
        ICM = ICM + 1
C       SET COMMA CHARACTER TO BE USED.
        IF (IALTC(IC).EQ.0)  THEN
          KCOM = KVCOM1
        ELSE
          KCOM = KVCOM2
        ENDIF
        CALL ALICHA (ITYPC, NSTAT, KSTAT, ICDES, LCDES, NC, IKEYCH,
     *   KCOM, MM1S, MS, ISBND, LIDAT, ICSTR, LCSTR, IC, ICM, KTYPE)
  100   CONTINUE
C
      RETURN
      END
      SUBROUTINE ALICTI (IDAT, IMI, MI, JI, JIM,
     * ITYPC, NSTAT, KSTAT, IMC, IALTC, IWORK, NC, ICDES, LCDES, ISTAT,
     * IAS, MS, ISBND, LIDAT, ICSTR, LCSTR, IC)
 
C* REVISED 8-OCT-92.
C* OUTPUTS A TAXON DESCRIPTION IN ALICE TRANSFER FORMAT.
 
C  IDAT RECEIVES THE ITEM.
C  IMI RECEIVES THE ITEM MASK.
C  MI RECEIVES THE MAXIMUM NUMBER OF ITEMS.
C  JI RECEIVES THE ITEM NUMBER.
C  JIM RECEIVES THE MASKED-IN ITEM NUMBER.
C  ITYPC RECEIVES THE CHARACTER TYPES.
C  NSTAT RECEIVES THE NUMBERS OF STATES.
C  KSTAT RECEIVES THE NUMBERS OF KEY STATES.
C  IMC RECEIVES THE CHARACTER MASK.
C  IALTC RECEIVES WHETHER TO USE THE ALTERNATE COMMA CHARACTER.
C  IWORK RECEIVES WORKING SPACE OF LENGTH NC.
C  NC RECEIVES THE NUMBER OF CHARACTERS.
C  ICDES RECEIVES THE STARTING POSITIONS OF THE CHARACTER DESCRIPTIONS.
C  LCDES RECEIVES THE LENGTHS OF THE CHARACTER DESCRIPTIONS.
C  ISTAT RECEIVES WORKING SPACE OF LENGTH MS.
C  IAS RECEIVES WORKING SPACE OF LENGTH MS.
C  MS RECEIVES THE MAXIMUM NUMBER OF STATES.
C  ISBND RECEIVES THE NEW STATE BOUNDARIES.
C  LIDAT RECEIVES THE DATA BUFFER LENGTH.
C  ICSTR. IF ISTYPE.EQ.1, ICSTR RECEIVES THE CHARACTER DESCRIPTIONS.
C    IF ISTYPE.NE.1, ICSTR IS WORKING SPACE. SEE SUBR. FETCHC.
C  LCSTR RECEIVES THE DIMENSION OF ICSTR.
C  IC RECEIVES THE CHARACTER NUMBER.
C
      DIMENSION IDAT(LIDAT),IMI(MI),IMC(NC),ITYPC(NC),NSTAT(NC),
     * KSTAT(NC),IALTC(NC),ICDES(NC),LCDES(NC),IAS(MS),ISBND(LIDAT),
     * ICSTR(LCSTR),IWORK(NC),ISTAT(MS),ITSF(3)
 
      COMMON /BLKXXX/ KBLANK
      COMMON /LUFXXX/ FNAME(19),LFNAME(19)
        CHARACTER FNAME*80
      COMMON /LUOXXX/ NUN,LPAGE,LPRINT,LTOP,LPRDEF,LPUDEF,
     * LUNCOM(15),LUNPRE(15),LUNUSE(19),LUNREC(19),LUNPAG(19)
      COMMON /JSTXXX/ IOUT(132,5),LOUT,ICAP,
     * JIOUT(5),IENDWD(5),INDEN(5),LWIDTH(5),PSEQ,SEQINC,NSQDIG
      COMMON /SYMXXX/ KPOINT,KDASH,KSTAR,KVERT,KEQUAL,KCOMMA,KSEMIC,
     * KCOLON,KSTOP,KSOL,KLPAR,KRPAR,KDOLLA,KQUEST,KEXCL,KAT,KLBRACE,
     * KRBRACE
      COMMON /VLWXXX/ NVWD,MAXVWD,LVWD(18),IBPUNC,IEPUNC,
     * KVSTOP,KVCOM1,KVCOM2,KVSEMI,KVDEC
 
      CHARACTER NAMREC*210
 
C     ITEM MASKED OUT?
      IF (IMI(JI).EQ.0)  GOTO 1000
 
      IF (JIM.EQ.1)  THEN
        CALL GETAU (LUNT)
        CALL EXNAME ('sam.tdu', FNAME(LUNT))
        LFNAME(LUNT) = LSTRB(FNAME(LUNT))
        LUNUSE(LUNT) = LUNCOM(4)
        CALL UOPEN(LUNT, LUNUSE(LUNT), 'sam.tdu', IDUM, IERR)
        IF (IERR.NE.0)  THEN
          CALL MESSA(58, 1, 0)
          CALL EXTERM
        ENDIF
      ENDIF
 
C     OUTPUT TAXON NAME RECORD.
      WRITE(NAMREC, '(I5)') JIM
      CALL ALINAM (IDAT(NC+2), LIDAT, NAMREC(78:98), NAMREC(99:138))
      NAMREC(6:13) = 'Accepted'
      NAMREC(17:21) = 'Genus'
      NAMREC(38:45) = 'G_Author'
      NAMREC(138:144) = 'Species'
      WRITE(LUNT, '(A)') NAMREC
      LUNREC(LUNT) = LUNREC(LUNT) + 1
 
      LUNTYP = 4
 
C     OUTPUT ITEM NUMBER.
      CALL JNKOD(JIM, IOUT(1,LUNTYP), 5)
 
      DO 600 IC = 1, NC
        IF (IMC(IC).EQ.0)  GOTO 600
        IF (IDAT(IC).EQ.0)  GOTO 600
        CALL FNDKST (IDAT, ISBND, IC, LIDAT, ITYPC, KSTAT, IWORK, NC,
     *   1, ISTAT, MS, ITSF, JI, 0.0, 0.0)
        NS = KSTAT(IC)
        NZ = NONZER (ISTAT, NS)
        IF (NZ.EQ.0)  GOTO 600
 
C       GET CHARACTER DESCRIPTION.
        CALL FETCHC (ICSTR, LCSTR, ICDES, LCDES, NC, IC, IAC, IAS, MS)
C       OUTPUT FEATURE DESCRIPTION.
        CALL SENSIM (ICSTR(IAC), LCSTR, IOUT(6,LUNTYP), 30, 30, JBF,
     *   1, 0)
 
        JTYPC = IABS(ITYPC(IC))
C       SET COMMA CHARACTER TO BE USED.
        IF (IALTC(IC).EQ.0)  THEN
          KCOM = KVCOM1
        ELSE
          KCOM = KVCOM2
        ENDIF
 
C       STATES.
        JSG = ISBND(IC) + 1
        
        DO 500 JS = 1, NS
        
          IF (ISTAT(JS).NE.0)  THEN
          
            JB = 35
            IF (ISBND(IC).NE.0)  GOTO 100
 
C--         ORIGINAL STATES.
            I = IAS(JS)
            CALL SENSIM (ICSTR(I), LCSTR, IOUT(JB+1,LUNTYP), 30, 30,
     *       JBF, 0, 0)
            JB = JB + 30
            GOTO 400
      
C--         NEW STATES.
  100       NB = JSG + 2
            NE = JSG + ISBND(JSG) - 1
            ITS = ISBND(JSG+1)
            LL = 30
            IF (JTYPC.GE.3)  GOTO 300
          
C-          MULTISTATE.
            DO 200 J = NB, NE
              IS = ISBND(J)
              I = IAS(IS)
              CALL SENSIM (ICSTR(I), LCSTR, IOUT(JB+1,LUNTYP), LL, 1,
     *         LBF, 0, 0)
              JB = JB + LBF
              LL = LL - LBF
              IF (J.EQ.NE)  GO TO 200
              IF (JTYPC.EQ.2) THEN
                IWD = 2
              ELSE
                CALL OUTWRD (KCOM, IOUT(1,LUNTYP), LIDAT, JB, LL)
                IWD = 1
              ENDIF
              CALL OUTSYM (KBLANK, IOUT(1,LUNTYP), JB, LL)
              CALL OUTWRD (IWD, IOUT(1,LUNTYP), LIDAT, JB, LL)
  200         CONTINUE
            GO TO 400
          
C-          NUMERIC.
  300       IF (NSTAT(IC).EQ.1)  I1 = IAS(1)
            IF (JTYPC.EQ.4)  GO TO 310
            VMIN = ISBND(NB)
            VMAX = ISBND(NE)
            GO TO 320
  310       VMIN = RELIN (ISBND(NB))
            VMAX = RELIN (ISBND(NE))
C         
 320        IF (NE.GT.NB)  GO TO 340
C           ONE VALUE.
            IF (JS.EQ.1.AND.ITS.EQ.3)
     *        CALL OUTWRD (12, IOUT(1,LUNTYP), LIDAT, JB, LL)
            CALL OUTNUM (VMIN, IOUT(1,LUNTYP), JB, LL, 1)
            IF (NSTAT(IC).EQ.1)  THEN
              CALL SENSIM (ICSTR(I1), LCSTR, IOUT(JB+1,LUNTYP), LL, 1,
     *         LBF, 0, 0)
              JB = JB + LBF
              LL = LL - LBF
              CALL OUTSYM (KBLANK, IOUT(1,LUNTYP), JB, LL)
            ENDIF
            IF (JS.EQ.NS.AND.ITS.EQ.3)
     *       CALL OUTWRD (13, IOUT(1,LUNTYP), LIDAT, JB, LL)
            GO TO 390
C         
C           MORE THAN ONE VALUE.
  340       CALL OUTNUM (VMIN, IOUT(1,LUNTYP), JB, LL, 1)
            CALL OUTWRD (2, IOUT(1,LUNTYP), LIDAT, JB, LL)
            CALL OUTNUM (VMAX, IOUT(1,LUNTYP), JB, LL, 1)
            IF (NSTAT(IC).EQ.1)  THEN
              CALL SENSIM (ICSTR(I1), LCSTR, IOUT(JB+1,LUNTYP), LL, 1,
     *         LBF, 0, 0)
              JB = JB + LBF
              LL = LL - LBF
              CALL OUTSYM (KBLANK, IOUT(1,LUNTYP), JB, LL)
            ENDIF
  390       JB = JB - 1
      
C           BLANK FILL RECORD.
  400       DO I = JB+1,69
              IOUT(I,LUNTYP) = KBLANK
            END DO
            CALL WRTREC (IOUT(1,LUNTYP), 69, LUNTYP, 4)
          ENDIF
          IF (ISBND(IC).GT.0)  JSG = JSG + ISBND(JSG)
  500   CONTINUE
  600 CONTINUE
    
 1000 RETURN
      END
      SUBROUTINE ALINAM (ISEN, LSEN, NAM, CMT)                              TALI
 
C* REVISED 8-OCT-92.
C* EXTRACTS TAXON NAME AND COMMENT FOR ALICE FORMAT.
 
C  ISEN RECEIVES THE NAME (SEE SUBR. SENTNC).
C  LSEN RECEIVES THE LENGTH OF ISEN.
C  NAME RETURNS THE TAXON NAME
C  CMT RETURNS THE COMMENT ASSOCIATED WITH THE TAXON NAME.
 
      COMMON /BLKXXX/ KBLANK
 
      DIMENSION ISEN(LSEN)
      CHARACTER NAM*(*),CMT*(*)
 
      LNAM = LEN(NAM)
      LCMT = LEN(CMT)
      NAM = CHAR(KBLANK)
      CMT = CHAR(KBLANK)
      JNAM = 0
      JCMT = 0
 
      JSG = 2
   10 IF (JSG.GT.ISEN(1))  GO TO 50
        IB = JSG + 2
        L = ISEN(JSG) - 2
        IF (ISEN(JSG+1).EQ.0)  THEN
C         COMMENT.
          IB = IB + 1
          L = L - 2
          INCMT = 1
C         INSERT BLANK BETWEEN COMMENTS.
          IF (JCMT.GT.0.AND.JCMT+1.LE.LCMT)  THEN
            JCMT = JCMT + 1
            CMT(JCMT:JCMT) = CHAR(KBLANK)
          ENDIF
        ELSE
          INCMT = 0
C         INSERT BLANK BETWEEN NAME FIELDS.
          IF (JNAM.GT.0.AND.JNAM+1.LE.LNAM)  THEN
            JNAM = JNAM + 1
            NAM(JNAM:JNAM) = CHAR(KBLANK)
          ENDIF
        ENDIF
        IE = IB + L - 1
        DO I = IB, IE
          IF (IGNOR(ISEN(I)).EQ.0)  THEN
            IF (INCMT.NE.0)  THEN
              IF (JCMT+1.LE.LCMT)  THEN
                JCMT = JCMT + 1
                CMT(JCMT:JCMT) = CHAR(ISEN(I))
              ENDIF
            ELSE
              IF (JNAM+1.LE.LNAM)  THEN
                JNAM = JNAM + 1
                NAM(JNAM:JNAM) = CHAR(ISEN(I))
              ENDIF
            ENDIF
          ENDIF
        END DO
        JSG = JSG + ISEN(JSG)
        GO TO 10
 
   50 RETURN
      END
