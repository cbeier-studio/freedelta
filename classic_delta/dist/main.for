      SUBROUTINE DIST1(W, IW, LW, IPARAM, NPARAM)                           MAIN
 
C  REVISED 11-NOV-93.
C  CALCULATES DISTANCE MATRIX.
 
C  25-JUL-89. 'CHARACTER RELIABILITIES' DIRECTIVE CHANGED TO
C    'CHARACTER WEIGHTS'. (CODE WAS ALREADY SETTING WEIGHTS -
C    ONLY CONTROL WORD WAS ALTERED.)
C  25-FEB-88. 'MATCH OVERLAP' DIRECTIVE ADDED.
 
C  INPUT FILES:
C  LUNI = DIRECTIVES FILE - OPTIONAL.
C  LUNT = FILE PRODUCED BY THE TRANSLATE INTO DISTANCE FORMAT
C         DIRECTIVE IN CONFOR.
 
C  OUTPUT FILES:
C  LUNN = LIST OF ITEM NAMES.
C  LUNO = UPPER TRIANGLE OF SIMILARITY MATRIX.
 
C  LIST OF VARIABLES.
C  =================
 
C  BLANK = THE CHARACTER ' '. (SYMXXX)
C  CMAX = MAXIMUM CHARACTER VALUE.
C  CMIN = MINIMUM CHARACTER VALUE.
C  COLON = THE CHARACTER ':'. (SYMXXX)
C  COMMA = THE CHARACTER ','. (SYMXXX)
C  CRANGE = RANGE OF NUMERIC AND MULTISTATE CHARACTERS.
C  DIS = DISTANCE.
C  FF = FORM-FEED. (FFFXXX)
C  FNAME = FILE NAME. (LUFXXX)
C  HEAD = TEXT OF HEADER. (HEDXXX)
C  IBREC = RECORD ADDRESSES FOR ROWS OF INTERMEDIATE MATRIX.
C  IBUF = INPUT BUFFER. (INPXXX)
C  ICMAX = STARTING LOCATION IN W OF CMAX. (ADRXXX)
C  ICMIN = STARTING LOCATION IN W OF CMIN. (ADRXXX)
C  ICRANG = STARTING LOCATION IN W OF CRANG. (ADRXXX)
C  IDM = STARTING LOCATION IN W OF DMATRX. (ADRXXX)
C  IEOF = WHETHER END-OF-FILE HAS OCCURRED WHILE READING THE DIRECTIVES
C         FILE. (INPXXX)
C  IERR = ERROR FLAG. (ERRXXX)
C  IFOPEN = WHETHER A DIRECTIVES FILE HAS BEEN OPENED ON LUNI. (INPXXX)
C  IIBREC = STARTING LOCATION IN IW OF IBREC. (ADRXXX)
C  IIMC = STARTING LOCATION IN IW OF IMC. (ADRXXX)
C  IIMI = STARTING LOCATION IN IW OF IMI. (ADRXXX)
C  IITMS = STARTING LOCATION IN IW OF ITMS. (ADRXXX)
C  IITMAP = STARTING LOCATION IN IW OF ITMAP. (ADRXXX)
C  IITMPT = STARTING LOCATION IN IW OF ITPTR. (ADRXXX)
C  IITYPC = STARTING LOCATION IN IW OF ITYPC. (ADRXXX)
C  ILNAME = STARTING LOCATION IN IW OF LNAME. (ADRXXX)
C  IMC = CHARACTER MASK.
C  IMI = ITEM MASK.
C  INCMSK = WHETHER CHARACTER MASK SPECIFIED. (MISXXX)
C  INCWT = WHETHER CHARACTER RELIABILITIES SPECIFIED. (MISXXX)
C  INSTAT = STARTING LOCATION IN IW OF NSTAT. (ADRXXX)
C  INTMSK = WHETHER ITEM MASK SPECIFIED. (MISXXX)
C  IPARAM = ARRAY TO HOLD PARAMETERS READ FROM FIRST RECORD OF
C    ITEMS FILE.
C  IPHYLP = WHETHER TO USE PHYLIP FORMAT (MISXXX)
C  IPTR = POINTER TO START OF ITEM.
C  IRECDA = RECORD NUMBER. (DAPXXX)
C  IWTC = STARTING LOCATION IN W OF WTC. (ADRXXX)
C  ISTPR1 = STARTING LOCATION IN W OF STPR1. (ADRXXX)
C  ISTPR2 = STARTING LOCATION IN W OF STPR2. (ADRXXX)
C  ITM1,ITM2 - ITEMS.
C  ITMS = ARRAY TO STORE ITEMS.
C  ITMAP = MAPPING FROM MASKED-IN ITEM NUMBERS TO ORIGINAL ITEM
C    NUMBERS.
C  ITPTR = POINTERS TO ITEMS ON ITEMS FILE.
C  ITYPC = CHARACTER TYPES.
C  JBUF = CURRENT POSITION IN THE INPUT BUFFER. (INPXXX)
C  JEDAT = LENGTH OF RECORD IN INPUT BUFFER. (INPXXX)
C  JPTR = POINTER TO START OF ITEM.
C  LBRAC = THE CHARACTER '('. (SYMXXX)
C  LDM = STORAGE ALLOCATED FOR DISTANCE MATRIX.
C  LENITM = STORAGE REQUIRED FOR AN INPUT ITEM. (PARXXX)
C  LFNAME = LENGTH OF FILE NAME. (LUFXXX)
C  LHEAD = LENGTH OF HEADER TEXT. (LHEADX)
C  LRECDA = RECORD LENGTH OF DIRECT ACCESS FILE. (DAPXXX)
C  LNAME = LENGTH OF TAXON NAMES.
C  LOGON = WHETHER LOGGING HAS BEEN SPECIFIED. (MISXXX)
C  LUNCOM(LUNTYP) = COMPATIBILITY OF LOGICAL-UNIT TYPE LUNTYP. (LUOXXX)
C  LUNE = ERROR FILE. (LUNXXX)
C  LUNI = INPUT DIRECTIVES FILE. (LUNXXX)
C  LUNL = LISTING FILE. (LUNXXX)
C  LUNN = OUTPUT FILE FOR ITEM NAMES. (LUNXXX)
C  LUNO = OUTPUT FILE FOR DISTANCE MATRIX. (LUNXXX)
C  LUNPAG = WHETHER THERE IS PAGING ON AN OUTPUT UNIT. (LUOXXX)
C  LUNREC = NUMBER OF RECORDS OUTPUT TO A UNIT. (LUOXXX)
C  LUNS = SCRATCH FILE. (LUNXXX)
C  LUNT = INPUT DATA (ITEMS) FILE. (LUNXXX)
C  LUNTI = LOGICAL UNIT FOR TERMINAL INPUT. (LUTXXX)
C  LUNTO = LOGICAL UNIT FOR TERMINAL OUTPUT. (LUTXXX)
C  LUNTYP = TYPE OF USE OF LOGICAL UNIT. 1 - DIRECTIVES INPUT.
C    2 - DIRECT-ACCESS DATA FILE. 3 - OUTPUT OF DISTANCE MATRIX.
C    4 - ERROR OUTPUT. 5 - LISTING OUTPUT. 6 - DIRECT-ACCESS
C    SCRATCH FILE FOR SAVING MATRIX ELEMENTS. 7 - OUTPUT OF NAMES.
C  LUNUSE(LUN) = TYPE OF USE OF LOGICAL UNIT LUN. (LUOXXX)
C  LW = LENGTH OF MAIN DATA ARRAY (BLANK COMMON).
C  MATCHO = WHETHER PARTIAL MATCHES (OVERLAP OF STATE VALUES) ARE
C    TO BE TREATED AS EXACT MATCHES. (PARXXX)
C  MBUF = MESSAGE BUFFER.
C  MCHAR = NUMBER OF MASKED-IN CHARACTERS. (PARXXX)
C  MINCMP = MINIMUM NUMBER OF CHARACTER COMPARISONS ACCEPTABLE. (PARXXX)
C  MITEM = NUMBER OF MASKED-IN ITEMS. (PARXXX)
C  MS = MAXIMUM NUMBER OF CHARACTER STATES. (PARXXX)
C  NBITS = NUMBER OF BITS PER WORD USED FOR PACKED INFORMATION.
C    NOTE.  MUST AGREE WITH THE CORRESPONDING VALUE IN CONFOR.
C    IN VERSIONS ACCESSING THE BITS BY STANDARD MEANS, THE SIGN BIT
C    MUST NOT BE USED. (PARXXX)
C  NCMP = NUMBER OF COMPARISONS (I.E. NUMBER OF CHARACTERS
C    CONTRIBUTING TO A DISTANCE).
C  NCHAR  = NUMBER OF CHARACTERS. (PARXXX)
C  NIM = TOTAL NUMBER OF ITEMS HELD IN MEMORY. (MEMXXX)
C  NIM1 = NUMBER OF ITEMS IN GROUP 1. (NIM1+NIM2=NIM.) (MEMXXX)
C  NIM2 = NUMBER OF ITEMS IN GROUP 2. (NIM1+NIM2=NIM.) (MEMXXX)
C  NITEM  = NUMBER OF ITEMS. (PARXXX)
C  NPARAM = NUMBER OF PARAMETERS IN FIRST RECORD OF ITEMS FILE.
C  NSTAT NUMBERS OF CHARACTER STATES.
C  NUN = NUMBER OF LOGICAL UNITS AVAILABLE FOR USE. (LUOXXX)
C  PID = PROGRAM IDENTIFICATION. (PIDXXX)
C  PIDP = PROGRAM IDENTIFICATION (PARAMETER).
C  RANGE = THE CHARACTER '-'. (SYMXXX)
C  RBRAC = THE CHARACTER ')'. (SYMXXX)
C  WTC = CHARACTER WEIGHTS.
C  WTOT = SUM OF WEIGHTS.
C  SEMIC = THE CHARACTER ';'. (SYMXXX)
C  STAR = THE CHARACTER '*'. (SYMXXX)
C  STOP = THE CHARACTER '.'. (SYMXXX)
C  STPR1 = STATE PROBABILITIES FOR ITEM 1.
C  STPR2 = STATE PROBABILITIES FOR ITEM 2.
C  UPAROW = THE CHARACTER '^'. (SYMXXX)
 
      COMMON /ADRXXX/ IIMC,INSTAT,IITYPC,IWTC,IICPTW,IICPTB,
     * ICRANG,ICMIN,ICMAX,ISTPR1,ISTPR2,IIMI,IITMPT,ILNAME,IDM,IITMS,
     * IITMAP,IIBREC
      COMMON /DAPXXX/ IRECDA,LRECDA
      COMMON /ERRXXX/ IERR
      COMMON /FFFXXX/ FF
        CHARACTER*1 FF
      COMMON /INPBUF/ IBUF
      CHARACTER*121 IBUF
      COMMON /INPXXX/ JBUF,JEDAT,IEOF,IFOPEN
      COMMON /LUFXXX/ FNAME(10),LFNAME(10)
        CHARACTER FNAME*30
      COMMON /LUNXXX/ LUNI,LUNT,LUNO,LUNE,LUNL,LUNS,LUNN
      COMMON /LUOXXX/ NUN,LPRINT,LTOP,LUNCOM(8),
     *                LUNUSE(12),LUNREC(12),LUNPAG(12)
      COMMON /LUTXXX/ LUNTI,LUNTO
      COMMON /MEMXXX/ NIM,NIM1,NIM2,NIMMAX
      COMMON /MISXXX/ INCMSK,INTMSK,INCWT,LOGON,IPHYLP
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
      COMMON /PIDXXX/ PID
        CHARACTER*230 PID
      COMMON /SYMXXX/ BLANK,STOP,SEMIC,LBRAC,RBRAC,RANGE,STAR,UPAROW,
     *                COMMA,COLON
      CHARACTER*1 BLANK,STOP,SEMIC,LBRAC,RBRAC,RANGE,STAR,UPAROW,
     *            COMMA,COLON

      DIMENSION W(LW),IW(LW),IPARAM(NPARAM)
      LOGICAL*4 O
      CHARACTER FSPEC*60

      CALL BLKDAT
 
      CALL INITF (LUNE, LUNI, LUNTI, LUNTO, LUNUSE, NUN)
 
      IF (LUNE.LT.0) STOP '****** PROGRAM BUG. LUNE NOT DEFINED.'
      LUNL = LUNE
      FSPEC= 'TERMINAL'
      IF (LUNTO.GE.0) CALL SETLUN (FSPEC, LUNTO, 5)
      IF (LUNUSE(LUNE).LT.0) THEN
        INQUIRE (UNIT=LUNE, NAME=FSPEC)
        CALL SETLUN (FSPEC, LUNE, 3)
      ENDIF
      LUNL = LUNE
 
      CALL PROGID (LUNE)
 
      IF (LUNI.LT.0) STOP '****** PROGRAM BUG. LUNI NOT DEFINED.'
      INQUIRE (UNIT=LUNI, OPENED=O)
      IF (O) THEN
        INQUIRE (UNIT=LUNI, NAME=FSPEC)
        CALL SETLUN (FSPEC, LUNI, 1)
        IFOPEN = 1
      ELSE
        IFOPEN = 0
      ENDIF
 
C--   READ DIRECTIVES AND FIRST RECORD OF ITEMS FILE.
      CALL RDDIR (W, IW, LW, IPARAM, NPARAM)
      IF (IERR.NE.0) CALL UCLOSE
 
C     READ DATASET PARAMETERS.
      CALL RDSPEC (IPARAM, NPARAM, IW(IIMC), IW(INSTAT), IW(IITYPC),
     * W(IWTC), IW(IICPTW), IW(IICPTB),
     * IW(IIMI), IW(IITMPT), IW(ILNAME))
 
C     ALLOCATE REMAINING STORAGE.
      CALL ALLOC2 (IW(IIMI), IW(IIMC), LW, LDM, LITMS)
 
C     INITIALIZE RUN-TIME INFORMATION.
      CALL SETUP (IW(IIMI), IW(IITMAP), IW(IIBREC))
 
C     DETERMINE RANGES OF NUMERIC CHARACTERS.
      CALL NRANGE (IW(IITMS), LITMS, IW(IITYPC), IW(IICPTW),
     * W(ICMIN), W(ICMAX), W(ICRANG), IW(IIMC), IW(IIMI),
     * IW(IITMPT))
 
C     CALCULATE MATRIX ENTRIES.
      CALL CALC (W(IDM), LDM, IW(IITMS), LITMS, IW(IIMC), IW(INSTAT),
     * IW(IITYPC), W(IWTC), IW(IICPTW), IW(IICPTB), W(ICRANG), IW(IIMI),
     * IW(IITMPT), IW(ILNAME), IW(IITMAP), IW(IIBREC), W(ISTPR1), 
     * W(ISTPR2))
 
      CALL NAMES (IW(IITMPT), IW(ILNAME), IW(IIMI), NITEM)
 
      CALL UCLOSE
 
      END
      SUBROUTINE ALLOC1 (LW, IPARAM, NPARAM)                                MAIN
 
C* REVISED 21/7/87.
C* READS FIRST RECORD OF ITEMS FILE AND ALLOCATES STORAGE SPACE.
 
      COMMON /ADRXXX/ IIMC,INSTAT,IITYPC,IWTC,IICPTW,IICPTB,
     * ICRANG,ICMIN,ICMAX,ISTPR1,ISTPR2,IIMI,IITMPT,ILNAME,IDM,IITMS,
     * IITMAP,IIBREC
      COMMON /DAPXXX/ IRECDA,LRECDA
      COMMON /LUNXXX/ LUNI,LUNT,LUNO,LUNE,LUNL,LUNS,LUNN
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION IPARAM(NPARAM)
 
C     READ PARAMETERS RECORD.
      IRECDA = 1
      CALL RDDAI (IPARAM, NPARAM, IRECDA, LUNT)
      IF (LRECDA.NE.IPARAM(1)) CALL FERROR
     *  ('PROGRAM BUG. WRONG LRECDA.%')
      IF (NBITS.NE.IPARAM(2)) CALL FERROR
     *  ('PROGRAM BUG. WRONG NBITS.%')
C     IF (NCHRWD.NE.IPARAM(3)) CALL FERROR
C    *  ('PROGRAM BUG. WRONG NCHRWD.%')
      NITEM = IPARAM(4)
      NCHAR = IPARAM(5)
      MS = IPARAM(6)
      LENITM = IPARAM(7)
 
C     ITYPC(NCHAR)
      IITYPC = 1
 
C     NSTAT(NCHAR).
      INSTAT = IITYPC + NCHAR
 
C     IMC(NCHAR).
      IIMC = INSTAT + NCHAR
 
C     WTC(NCHAR).
      IWTC = IIMC + NCHAR
 
C     ICPTW(NCHAR).
      IICPTW = IWTC + NCHAR
 
C     ICPTB(NCHAR).
      IICPTB = IICPTW + NCHAR
 
C     CMIN(NCHAR).
      ICMIN = IICPTB + NCHAR
 
C     CMAX(NCHAR).
      ICMAX = ICMIN + NCHAR
 
C     CRANGE(NCHAR).
      ICRANG = ICMAX + NCHAR
 
C     STPR1(MS).
      ISTPR1 = ICRANG + NCHAR
 
C     STPR2(MS).
      ISTPR2 = ISTPR1 + MS
 
C     IMI(NITEM).
      IIMI = ISTPR2 + MS
 
C     ITPTR(NITEM).
      IITMPT = IIMI + NITEM
 
C     LNAME(NITEM).
      ILNAME = IITMPT + NITEM
 
      IF (ILNAME+NITEM.GT.LW)
     *  CALL FERROR ('INSUFFICIENT MEMORY AVAILABLE.%')
 
      RETURN
      END
      SUBROUTINE ALLOC2 (IMI, IMC, LW, LDM, LITMS)                          MAIN
 
C* REVISED 3/9/87.
C* ALLOCATES REMAINING STORAGE.
 
C  IMI RECEIVES THE ITEM MASK.
C  IMCI RECEIVES THE CHARACTER MASK.
C  LW RECEIVES THE TOTAL STORAGE AVAILABLE.
C  LDM RETURNS THE LENGTH OF DMATRX.
C  LITMS RETURNS THE MEMORY AVAILABLE TO STORE ITEMS.
 
      COMMON /ADRXXX/ IIMC,INSTAT,IITYPC,IWTC,IICPTW,IICPTB,
     * ICRANG,ICMIN,ICMAX,ISTPR1,ISTPR2,IIMI,IITMPT,ILNAME,IDM,IITMS,
     * IITMAP,IIBREC
      COMMON /LUTXXX/ LUNTI,LUNTO
      COMMON /MEMXXX/ NIM,NIM1,NIM2,NIMMAX
      COMMON /MISXXX/ INCMSK,INTMSK,INCWT,LOGON,IPHYLP
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION IMI(NITEM),IMC(NCHAR)
 
C     FIND NUMBER OF MASKED-IN CHARACTERS AND ITEMS.
      MITEM = NONZER (IMI, NITEM)
      IF (MITEM.LT.2) CALL FERROR
     *  ('A MINIMUM OF TWO ITEMS IS REQUIRED TO GENERATE A MATRIX.%')
      MCHAR = NONZER (IMC, NCHAR)
      IF (MCHAR.LE.0) CALL FERROR ('ALL CHARACTERS MASKED OUT.%')
 
C     ALLOCATE STORAGE.
 
C     ITMAP(MITEM)
      IITMAP = ILNAME + NITEM
 
C     IBREC(MITEM-1).
      IIBREC = IITMAP + MITEM
 
C     DMATRX(LDM).
      IDM = IIBREC + MITEM - 1
      IF (IDM.GT.LW) CALL FERROR ('INSUFFICIENT MEMORY AVAILABLE.%')
      LDM = MITEM - 1
 
C     ITMS CAN USE ALL REMAINING SPACE.
      IITMS = IDM + LDM
      IF (IITMS.GE.LW) CALL FERROR ('INSUFFICIENT MEMORY AVAILABLE.%')
      LITMS = LW - IITMS + 1
 
      NIM = MIN0(MITEM,LITMS/LENITM)
      IF (NIMMAX.GT.0)  NIM = MIN0(NIM,NIMMAX)
      IF (NIM.LT.2) CALL FERROR ('INSUFFICIENT MEMORY AVAILABLE.%')
 
      NIM2 = NIM/2
      NIM1 = NIM - NIM2
 
      RETURN
      END
      SUBROUTINE BLKDAT                                                     MAIN
 
C* REVISED 19-JUN-92.
C* SETS PARAMETERS IN COMMON.
 
      COMMON /DAPXXX/ IRECDA,LRECDA
      COMMON /FFFXXX/ FF
        CHARACTER*1 FF
      COMMON /LUNXXX/ LUNI,LUNT,LUNO,LUNE,LUNL,LUNS,LUNN
      COMMON /LUOXXX/ NUN,LPRINT,LTOP,LUNCOM(8),
     *                LUNUSE(12),LUNREC(12),LUNPAG(12)
      COMMON /LUTXXX/ LUNTI,LUNTO
      COMMON /MEMXXX/ NIM,NIM1,NIM2,NIMMAX
      COMMON /MISXXX/ INCMSK,INTMSK,INCWT,LOGON,IPHYLP
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
      COMMON /SYMXXX/ BLANK,STOP,SEMIC,LBRAC,RBRAC,RANGE,STAR,UPAROW,
     *                COMMA,COLON
      CHARACTER*1 BLANK,STOP,SEMIC,LBRAC,RBRAC,RANGE,STAR,UPAROW,
     *            COMMA,COLON
 
C     DAPXXX.
      LRECDA = 32
 
C     FFFXXX.
      FF = CHAR(12)
 
C     LUNXXX.
      LUNI = -1
      LUNT = -1
      LUNO = -1
      LUNE = -1
      LUNL = -1
      LUNS = -1
      LUNN = -1
 
C     LUOXXX.
      NUN = 12
      LPRINT = 60
      LTOP = 0
      DO 40 LUNTYP = 1, 8
        LUNCOM(LUNTYP) = LUNTYP
   40 CONTINUE
      LUNCOM(5) = 4
      DO 50 LUN = 1, NUN
        LUNUSE(LUN) = -1
        LUNREC(LUN) = 0
        LUNPAG(LUN) = 0
   50   CONTINUE
 
C     LUTXXX.
      LUNTI = -1
      LUNTO = -1
 
C     MEMXXX.
      NIMMAX = 0
 
C     MISXXX.
      INCMSK = 0
      INTMSK = 0
      INCWT = 0
      LOGON = 0
      IPHYLP = 0
 
C     PARXXX.
      NBITS = 32
      MINCMP = 0
      MATCHO = 0
 
C     SYMXXX.
      BLANK = ' '
      STOP = '.'
      SEMIC = ';'
      LBRAC = '('
      RBRAC = ')'
      RANGE = '-'
      STAR = '*'
      UPAROW = '^'
      COMMA = ','
      COLON = ':'
 
      RETURN
      END
      SUBROUTINE CALC (DMATRX, LDM, ITMS, LITMS, IMC, NSTAT, ITYPC, WTC,    MAIN
     * ICPTW, ICPTB, CRANGE, IMI, ITPTR, LNAME, ITMAP, IBREC,
     * STPR1, STPR2)
 
C* REVISED 11/11/93.
C* CALCULATES DISTANCE MATRIX ENTRIES.
 
C  DMATRX RETURNS THE UPPER TRIANGLE OF THE SIMILARITY MATRIX.
C  LDM RECEIVES THE LENGTH OF DMATRX.
C  ITMS RECEIVES WORKING SPACE TO STORE THE ITEMS.
C  LITMS RECEIVES THE LENGTH OF LITMS.
C  IMC RECEIVES THE CHARACTER MASK.
C  NSTAT RECEIVES THE NUMBER OF STATES.
C  ITYPC RECEIVES THE CHARACTER TYPES.
C  WTC RECEIVES THE CHARACTER WEIGHTS.
C  ICPTW RECEIVES THE CHARACTER WORD POINTERS.
C  ICPTB RECEIVES THE CHARACTER BIT OFFSETS.
C  CRANGE RECEIVES VALUE RANGE OF NUMERIC CHARACTERS.
C  IMI RECEIVES THE ITEM MASK.
C  ITPTR RECEIVES THE RECORD ADDRESSES OF THE ITEMS ON FILE.
C  LNAME RECEIVES THE LENGTHS OF ITEMS NAMES.
C  ITMAP RECEIVES THE MAPPING BETWEEN ORIGINAL AND MASKED ITEM NUMBERS.
C  IBREC RECEIVES RECORD ADDRESSES FOR INTERMEDIATE MATRIX.
C  STPR1 RECEIVES WORKING SPACE OF LENGTH MS.
C  STPR2 RECEIVES WORKING SPACE OF LENGTH MS.
 
      COMMON /LUNXXX/ LUNI,LUNT,LUNO,LUNE,LUNL,LUNS,LUNN
      COMMON /LUTXXX/ LUNTI,LUNTO
      COMMON /MEMXXX/ NIM,NIM1,NIM2,NIMMAX
      COMMON /MISXXX/ INCMSK,INTMSK,INCWT,LOGON,IPHYLP
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION DMATRX(LDM),ITMS(LITMS),IMC(NCHAR),ITYPC(NCHAR),
     * NSTAT(NCHAR),WTC(NCHAR),ICPTW(NCHAR),ICPTB(NCHAR),
     * CRANGE(NCHAR),IMI(NITEM),ITPTR(NITEM),LNAME(NITEM),ITMAP(MITEM),
     * IBREC(MITEM-1),STPR1(MS),STPR2(MS)
 
      CHARACTER MBUF*70
 
      IF (MINCMP.LE.0) MINCMP = SQRT(FLOAT(MCHAR))
      IF (MINCMP.GT.MCHAR) THEN
        MINCMP = MCHAR
        WRITE (MBUF, 5) MCHAR
    5   FORMAT ('MINIMUM NUMBER OF COMPARISONS RESET TO', I4, '.%')
        CALL ERROR (0, MBUF)
      ENDIF
 
      IF (LUNO.LT.0) CALL OPNDEF (3)
 
      ITM1 = 1
      MITM1 = 1
 
   10 IF (ITM1.GT.NITEM) GOTO 200
 
C       READ IN NIM1 ITEMS, STARTING AT ITEM ITM1.
 
        CALL RDITEM (ITMS, LITMS, ITM1, NIM1, IMI, ITPTR, LASTI1, NI1)
        IF (NI1.EQ.0) GOTO 200
        NEXT = LENITM * NI1 + 1
 
C       INTER-ITEM COMPARISONS.
        DO 30 I = 1, NI1
          IROW = MITM1 + I - 1
          NENT = 0
          ICOL1 = 0
          DO 20 J = I+1, NI1
            ICOL = MITM1 + J - 1
            IF (ICOL1.EQ.0) ICOL1 = ICOL
            NENT = NENT + 1
            DMATRX(NENT) = DISTI (ITMS, LITMS, I, J, ITYPC,
     *        NSTAT, IMC, CRANGE, ICPTW, ICPTB, WTC, STPR1, STPR2)
            IF (DMATRX(NENT).GE.999.) THEN
              WRITE (MBUF, 15) ITMAP(IROW), ITMAP(ICOL)
   15         FORMAT ('NO COMPARISON POSSIBLE BETWEEN ITEMS',
     *          I4, ' AND', I4, '.%')
              CALL ERROR (0, MBUF)
            ENDIF
   20       CONTINUE
          IF (NENT.GT.0)  CALL SAVE (DMATRX, NENT, IROW, ICOL1, IBREC)
C         LOG PROGRESS.
          IF (NENT.GT.0 .AND. LOGON.GT.0) THEN
            WRITE (MBUF, 25) NENT, IROW, ICOL1
   25       FORMAT ('STORED', I4, ' ELEMENTS, STARTING AT (',
     *        I4, ',', I4, ').%')
            L = LMESS (MBUF)
            CALL WRTREC (MBUF(1:L), LUNL)
          ENDIF
   30     CONTINUE
 
C       READ IN SECOND GROUP OF ITEMS, WHILE HOLDING FIRST GROUP IN
C       MEMORY.
 
        ITM2 = LASTI1 + 1
        MITM2 = MITM1 + NI1
  100   IF (ITM2.GT.NITEM) GOTO 150
 
          CALL RDITEM (ITMS(NEXT), LITMS, ITM2, NIM2, IMI, ITPTR,
     *      LASTI2, NI2)
          IF (NI2.EQ.0) GOTO 150
 
C         INTER-ITEM COMPARISONS BETWEEN FIRST AND SECOND GROUPS.
 
          DO 130 I = 1, NI1
            IROW = MITM1 + I - 1
            NENT = 0
            ICOL1 = 0
            DO 120 J = 1, NI2
              ICOL = MITM2 + J - 1
              IF (ICOL1.EQ.0) ICOL1 = ICOL
              NENT = NENT + 1
              DMATRX(NENT) = DISTI (ITMS, LITMS, I, NI1+J, ITYPC,
     *          NSTAT, IMC, CRANGE, ICPTW, ICPTB, WTC, STPR1, STPR2)
              IF (DMATRX(NENT).GE.999.) THEN
                WRITE (MBUF, 15) ITMAP(IROW), ITMAP(ICOL)
                CALL ERROR (0, MBUF)
              ENDIF
  120         CONTINUE
            IF (NENT.GT.0)  CALL SAVE (DMATRX, NENT, IROW, ICOL1, IBREC)
C           LOG PROGRESS.
            IF (NENT.GT.0.AND.LOGON.GT.0) THEN
              WRITE (MBUF, 25) NENT, IROW, ICOL1
              L = LMESS (MBUF)
              CALL WRTREC (MBUF(1:L), LUNL)
            ENDIF
  130       CONTINUE
 
          ITM2 = LASTI2 + 1
          MITM2 = MITM2 + NI2
          GOTO 100
 
  150   ITM1 = LASTI1 + 1
        MITM1 = MITM1 + NI1
        GOTO 10
 
  200 CALL MATOUT (DMATRX, LDM, MITEM, ITPTR, IMI, LNAME, NITEM)
 
      RETURN
      END
      FUNCTION   DISTI (ITMS, LITMS, I, J, ITYPC,                           MAIN
     * NSTAT, IMC, CRANGE, ICPTW, ICPTB, WTC, STPR1, STPR2)
 
C* REVISED 25-JUL-89.
C* CALCULATES THE DISTANCE BETWEEN TWO ITEMS.
 
C  ITMS RECEIVES THE ITEM ARRAY.
C  LITMS RECEIVES THE LENGTH OF ITMS.
C  I RECEIVES FIRST ITEM NUMBER.
C  J RECEIVES THE SECOND ITEM NUMBER.
C  ITYPC RECEIVES THE CHARACTER TYPES.
C  NSTAT RECEIVES THE NUMBERS OF CHARACTER STATES.
C  IMC RECEIVES THE CHARACTER MASK.
C  CRANGE RECEIVES THE VALUE RANGE FOR NUMERIC CHARACTERS.
C  ICPTW RECEIVES THE CHARACTER WORD POINTERS.
C  ICPTB RECEIVES THE CHARACTER BIT OFFSETS.
C  WTC RECEIVES THE CHARACTER WEIGHTS.
C  NC RECEIVES THE NUMBER OF CHARACTERS.
C  LENITM RECEIVES THE LENGTH OF A STORED ITEM.
 
      COMMON /LUNXXX/ LUNI,LUNT,LUNO,LUNE,LUNL,LUNS,LUNN
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION ITMS(LITMS),ITYPC(NCHAR),NSTAT(NCHAR),IMC(NCHAR),
     * CRANGE(NCHAR),ICPTW(NCHAR),ICPTB(NCHAR),WTC(NCHAR),
     * STPR1(MS),STPR2(MS)
 
      IPTR = (I - 1) * LENITM + 1
      JPTR = (J - 1) * LENITM + 1
      DIS = 0.0
      WTOT = 0.0
      NCMP = 0
 
      DO 100 IC = 1, NCHAR
        IF (IMC(IC).EQ.0) GOTO 100
        JTYPC = IABS(ITYPC(IC))
 
C       MULTISTATE.
        IF (JTYPC.LE.1) THEN
          D = DISTM (ITMS(IPTR), ITMS(JPTR), ICPTW(IC), ICPTB(IC),
     *      STPR1, STPR2, NSTAT(IC))
 
C       NUMERIC.
        ELSE IF (JTYPC.GE.2.AND.JTYPC.LE.4) THEN
          D = DISTN (ITMS(IPTR), ITMS(JPTR), ICPTW(IC), CRANGE(IC))
 
C       TEXT.
        ELSE
          GOTO 100
 
        ENDIF
 
        IF (D.GE.0.0) THEN
          DIS = DIS + D * WTC(IC)
          WTOT = WTOT + WTC(IC)
          NCMP = NCMP + 1
        ENDIF

C       IF (D.GT.0. .AND. I.EQ.1 .AND. (J.EQ.10.OR.J.EQ.16)) THEN
C         IF (JTYPC.EQ.1) THEN
C           WRITE (LUNL,1) J, IC, D, WTC(IC)
C   1       FORMAT (1X,'J,C,D,W    ', I2, I4, F6.3, F6.2)
C         ELSE
C           WRITE (LUNL,3) J, IC, D, WTC(IC), CRANGE(IC)
C   3       FORMAT (1X,'J,C,D,W,R  ', I2, I4, F6.3, F6.2, F7.1)
C         ENDIF
C       ENDIF
 
  100 CONTINUE
 
      IF (NCMP.GE.MINCMP) THEN
        DISTI = DIS/WTOT
      ELSE
        DISTI = 999.
      ENDIF
 
C     IF (I.EQ.1. AND. (J.EQ.10.OR.J.EQ.16)) THEN
C       WRITE (LUNL,5) J, DISTI, WTOT, NCMP
C   5   FORMAT (1X, 'J,  D,W,C  ', I2, 4X, F6.3, F6.1 ,I4 /)
C     ENDIF

      RETURN
      END
      FUNCTION   DISTM (ITM1, ITM2, ICPTW, ICPTB, STPR1, STPR2, NS)         MAIN
 
C* REVISED 25/2/88.
C* CALCULATES DISTANCE MEASURE FOR UNORDERED MULTISTATES.
 
C  ITM1 RECEIVES THE FIRST ITEM.
C  ITM2 RECEIVES THE SECOND ITEM.
C  ICPTW RECEIVES THE CHARACTER WORD POINTER.
C  ICPTB RECEIVES THE CHARACTER BIT OFFSET.
C  STPR1 RECEIVES WORKING SPACE OF LENGTH NS.
C  STPR2 RECEIVES WORKING SPACE OF LENGTH NS.
C  NS RECEIVES THE NUMBER OF STATES.
 
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION ITM1(LENITM),ITM2(LENITM),STPR1(NS),STPR2(NS)
 
      CALL SETPRB (ITM1, ICPTW, ICPTB, STPR1, NS, NSP1)
      IF (NSP1.EQ.0) THEN
        D = -1.
        GOTO 100
      ENDIF
      CALL SETPRB (ITM2, ICPTW, ICPTB, STPR2, NS, NSP2)
      IF (NSP2.EQ.0) THEN
        D = -1.
        GOTO 100
      ENDIF
 
      D = 0.0
      IF (MATCHO.EQ.0) THEN
        DO 10 IS = 1, NS
          D = D + ABS(STPR1(IS)-STPR2(IS))
   10   CONTINUE
        D = .5*D
      ELSE
        DO 20 IS = 1, NS
          IF (STPR1(IS).NE.0. .AND. STPR2(IS).NE.0.) GOTO 100
   20   CONTINUE
        D = 1.0
      ENDIF
C     'TAXON' METHOD.
C     D = 0.0
C     DO 10 IS = 1, NS
C       IF (STPR1(IS).EQ.0) THEN
C         IF (STPR2(IS).NE.0.) D = D + 1.
C       ELSE
C         IF (STPR2(IS).EQ.0.) D = D + 1.
C       ENDIF
C  10 CONTINUE
C     D = D/(NSP1+NSP2)
 
  100 DISTM = D
      RETURN
      END
      FUNCTION   DISTN (ITM1, ITM2, ICPTW, CRANGE)                          MAIN
 
C* REVISED 21/7/87.
C* CALCULATES DISTANCE MEASURE FOR NUMERICS AND ORDERED MULTISTATES.
 
C  ITM1 RECEIVES THE FIRST ITEM.
C  ITM2 RECEIVES THE SECOND ITEM.
C  ICPTW RECEIVES THE CHARACTER WORD POINTER.
C  CRANGE RECEIVES THE RANGE OF THE CHARACTER.
 
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION ITM1(LENITM),ITM2(LENITM)
 
      VAL1 = RELIN (ITM1(ICPTW))
      VAL2 = RELIN (ITM2(ICPTW))
 
C     CHECK FOR UNKNOWN, VARIABLE OR NOT APPLICABLE.
      IF (VAL1.LE.-9999. .OR. VAL2.LE.-9999.) THEN
        D = -1.0
      ELSE
        D = 0.0
        IF (CRANGE.GT.0.0) D = ABS(VAL1 - VAL2)/CRANGE
      ENDIF
      DISTN = D
 
      RETURN
      END
      SUBROUTINE MATOUT (D, LD, MI, ITPTR, IMI, LNAME, NITEM)               MAIN

C  REVISED 11/11/93.
C  OUTPUTS DISTANCE MATRIX.
 
      COMMON /LUNXXX/ LUNI,LUNT,LUNO,LUNE,LUNL,LUNS,LUNN
      COMMON /MISXXX/ INCMSK,INTMSK,INCWT,LOGON,IPHYLP
 
      DIMENSION D(LD), ITPTR(NITEM), IMI(NITEM), LNAME(NITEM)
 
      CHARACTER MBUF*80,STAR*10,BLANK*1
      DATA IWIDE/80/, STAR/'         *'/, BLANK/' '/
C     PARAMETER (IWIDE=80, STAR='         *', BLANK=' ')
 
      IRECDA = 1
      I = 0
      JROW = 1
      JCOL = JROW

      IF (IPHYLP.GT.0) THEN
        WRITE (LUNO, '(I7)') MI 
        CALL LCOUNT (LUNO)
        II = 0
      ENDIF
 
   10 READ (LUNS, REC=IRECDA) IROW, ICOL, N, (D(J),J=I+1,I+N)
      IF (IROW.NE.JROW) THEN
        WRITE (MBUF,11) IROW,JROW,IRECDA
   11   FORMAT ('ROW MISMATCH',3I3,'%')
        L = LMESS (MBUF)
        CALL FERROR (MBUF(1:L))
      ENDIF
      IF (ICOL.NE.JCOL+1)  THEN
        WRITE (MBUF,12) ICOL,JCOL,IRECDA
   12   FORMAT ('COLUMN MISMATCH',3I3,'%')
        L = LMESS (MBUF)
        CALL FERROR (MBUF(1:L))
      ENDIF
      JCOL = JCOL + N
      I = I + N
      IF (JCOL.GE.MI) THEN
        IF (IPHYLP.GT.0) THEN
   20     II = II + 1
          IF (II.GT.NITEM) 
     *         CALL FERROR ('PROGRAM BUG. TOO FEW ITEM NAMES.%')
          IF (IMI(II).EQ.0) GOTO 20
          JRECDA = ITPTR(II)
          L = MIN(10,LNAME(II))
          READ (LUNT, REC=JRECDA) MBUF(1:L)
          IF (L.LT.10) MBUF(L+1:10) = BLANK
          WRITE (LUNO, '(A)') MBUF(1:10)
          CALL LCOUNT (LUNO)
          IF (JROW.GT.MI-1) GOTO 100
        ENDIF
        L = 1
        DO 60 J = 1, MI-JROW
          IF (D(J).LE.1.0) THEN
            WRITE (MBUF(L:L+9), '(F10.5)') D(J)
          ELSE
            MBUF(L:L+9) = STAR
          ENDIF
          L = L + 10
          IF (L+9.GT.IWIDE) THEN
            WRITE (LUNO, '(A)') MBUF(:L-1)
            CALL LCOUNT (LUNO)
            L = 1
          ENDIF
   60     CONTINUE
        IF (L.GT.1) THEN
          WRITE (LUNO, '(A)') MBUF(:L-1)
          CALL LCOUNT (LUNO)
        ENDIF
        I = 0
        JROW = JROW + 1
        IF (JROW.GT.MI-1) GOTO 80
        JCOL = JROW
      ENDIF
      IRECDA = IRECDA + 1
      GOTO 10
 
   80 IF (IPHYLP.GT.0) GOTO 20
  100 RETURN
      END
      SUBROUTINE NAMES (ITPTR, LNAME, IMI, NITEM)                           MAIN
 
C* REVISED 24/7/87.
C* OUTPUT LIST OF MASKED-IN ITEM NAMES.
 
C  ITPTR RECEIVES RECORD POINTERS TO ITEMS FILE.
C  LNAME RECEIVES THE LENGTHS OF ITEM NAMES.
C  IMI RECEIVES THE ITEM MASK.
C  NITEM RECEIVES THE NUMBER OF ITEMS.
 
      COMMON /LUNXXX/ LUNI,LUNT,LUNO,LUNE,LUNL,LUNS,LUNN
      COMMON /MISXXX/ INCMSK,INTMSK,INCWT,LOGON,IPHYLP
 
      DIMENSION ITPTR(NITEM),LNAME(NITEM),IMI(NITEM)
 
      CHARACTER TAXNAM*128                                                    =*
 
C     CHECK FOR OUTPUT FILE.
      IF (LUNN.LE.0) THEN
        IF (IPHYLP.GT.0) RETURN
        CALL OPNDEF (7)
      ENDIF 

      DO 100 I = 1, NITEM
        IF (IMI(I).EQ.0) GOTO 100
        IRECDA = ITPTR(I)
        L = LNAME(I)
        READ (LUNT, REC=IRECDA) TAXNAM(1:L)
        CALL WRTREC (TAXNAM(1:L), LUNN)
  100 CONTINUE
 
      RETURN
      END
      SUBROUTINE NRANGE (ITMS, LITMS, ITYPC, ICPTW,                         MAIN
     * CMIN, CMAX, CRANGE, IMC, IMI, ITPTR)
 
C* REVISED 23/7/87.
C* DETERMINES RANGES OF NUMERIC AND ORDERED MULTISTATE CHARACTERS.
 
C  ITMS RECEIVES SPACE FOR STORING THE ITEMS.
C  LITMS RECEIVES THE LENGTH OF ITMS.
C  ITYPC RECEIVES THE CHARACTER TYPES.
C  ICPTW RECEIVES THE CHARACTER WORD POINTERS.
C  CMIN RETURNS THE MINIMUM CHARACTER VALUES.
C  CMAX RETURNS THE MAXIMUM CHARACTER VALUES.
C  CRANGE RETURNS THE CHARACTER RANGES.
C  IMC RECEIVES THE CHARACTER MASK.
C  IMI RECEIVES THE ITEM MASK.
C  ITPTR RECEIVES ITEM RECORD POINTERS.
 
      COMMON /MEMXXX/ NIM,NIM1,NIM2,NIMMAX
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION ITMS(LITMS),ITYPC(NCHAR),ICPTW(NCHAR),
     * CMIN(NCHAR),CMAX(NCHAR),CRANGE(NCHAR),IMC(NCHAR),
     * IMI(NITEM),ITPTR(NITEM)
 
C     INITIALIZE MINIMA AND MAXIMA.
      XMAX =  2.**29                                                          =*
      XMIN = -XMAX
      CALL SETRA (CMIN, NCHAR, XMAX)
      CALL SETRA (CMAX, NCHAR, XMIN)
 
      NREAD = NIM1 + NIM2
      NI = MITEM
      ITEM = 1
 
   10 NN = MIN0(NI,NREAD)
      IF (NN.LE.0) GOTO 250
        CALL RDITEM (ITMS, LITMS, ITEM, NN, IMI, ITPTR, LASTI, NITM)
        DO 200 IT = 1, NITM
          IPTR = (IT-1)*LENITM
          DO 100 IC = 1, NCHAR
            IF (IMC(IC).EQ.0) GOTO 100
            JTYPC = IABS(ITYPC(IC))
            IF (JTYPC.LT.2.OR.JTYPC.GT.4) GOTO 100
            VAL = RELIN (ITMS(IPTR+ICPTW(IC)))
C           CHECK FOR N/A, UNKNOWN OR VARIABLE.
            IF (VAL.LE.-9999.) GOTO 100
            IF (VAL.LT.CMIN(IC)) CMIN(IC) = VAL
            IF (VAL.GT.CMAX(IC)) CMAX(IC) = VAL
  100     CONTINUE
  200   CONTINUE
        NI = NI - NITM
        ITEM = LASTI + 1
      GOTO 10
 
  250 DO 260 IC = 1, NCHAR
        IF (IMC(IC).EQ.0) GOTO 260
        JTYPC = IABS(ITYPC(IC))
        IF (JTYPC.GE.2.AND.JTYPC.LE.4) THEN
          CRANGE(IC) = ABS(CMAX(IC)-CMIN(IC))
        ENDIF
  260 CONTINUE
 
      RETURN
      END
      SUBROUTINE SAVE (DMATRX, N, IROW, ICOL, IBREC)                        MAIN
 
C* REVISED 28/7/87.
C  SAVES MATRIX ELEMENTS ON SCRATCH FILE.
 
C  DMATRX RECEIVES THE MATRIX.
C  N RECEIVES THE NUMBER OF ELEMENTS TO BE OUTPUT.
C  IROW RECEIVES THE ROW NUMBER.
C  ICOL RECEIVES THE INITIAL COLUMN NUMBER.
C  IBREC RECEIVES ROW START ADDRESSES.
 
      COMMON /LUNXXX/ LUNI,LUNT,LUNO,LUNE,LUNL,LUNS,LUNN
      COMMON /MEMXXX/ NIM,NIM1,NIM2,NIMMAX
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION DMATRX(N),IBREC(MITEM-1)
 
      LROW = ICOL - IROW
      L1 = MOD(IROW,NIM1)
      NREC = 0
      IF (L1.NE.0) THEN
        L1 = NIM1 - L1
        NREC = 1
      ENDIF
      IF (ICOL.LE.IROW+L1) THEN
        IRECDA = IBREC(IROW)
      ELSE
        LREST = LROW - L1
        NREC = NREC + (LREST-1)/NIM2 + 1
        IRECDA = IBREC(IROW) + NREC - 1
      ENDIF
 
      WRITE (LUNS, REC=IRECDA) IROW, ICOL, N, (DMATRX(I),I=1,N)
      CALL LCOUNT (LUNS)
 
      RETURN
      END
      SUBROUTINE SETPRB (ITMS, ICPTW, ICPTB, PROB, NS, NSP)                 MAIN
 
C* REVISED 13-FEB-89.
C* DETERMINES THE STATE PROBABILITIES OF AN ITEM ATTRIBUTE.
 
C  ITMS RECEIVES THE ITEM.
C  ICPTW RECEIVES THE CHARACTER WORD POINTER.
C  ICPTB RECEIVES THE CHARACTER BIT OFFSET.
C  PROB RETURNS THE STATE PROBABILITIES.
C  NS RECEIVES THE NUMBER OF STATES.
C  NSP RETURNS THE NUMBER OF STATES PRESENT.
 
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION ITMS(LENITM),PROB(NS)
 
      IW = ICPTW
      IB = ICPTB
      NSP = 0
 
      DO 100 IS = 1, NS
        IF (IIBIT(IB+IS, ITMS(IW), NBITS).NE.0)  THEN
          PROB(IS) = 1
          NSP = NSP + 1
        ELSE
          PROB(IS) = 0
        ENDIF
  100 CONTINUE
 
  200 IF (NSP.GT.1) THEN
        DO 210 IS = 1, NS
          PROB(IS) = PROB(IS)/NSP
  210   CONTINUE
      ENDIF
 
      RETURN
      END
      SUBROUTINE SETUP (IMI, ITMAP, IBREC)                                  MAIN
 
C* REVISED 8-MAR-94.
C* INITIALIZE RUN-TIME INFORMATION.
 
C  ITMAP RETURNS MAPPING BETWEEN MASKED AND ORIGINAL ITEM NUMBERS.
C  IBREC RETURNS RECORD ADDRESSES FOR INTERMEDIATE MATRIX.
 
      COMMON /LUOXXX/ NUN,LPRINT,LTOP,LUNCOM(8),
     *                LUNUSE(12),LUNREC(12),LUNPAG(12)
      COMMON /MEMXXX/ NIM,NIM1,NIM2,NIMMAX
      COMMON /MISXXX/ INCMSK,INTMSK,INCWT,LOGON,IPHYLP
      COMMON /PARXXX/ NCHAR,MCHAR,NITEM,MITEM,MS,LENITM,NBITS,MINCMP,
     *  MATCHO
 
      DIMENSION IMI(NITEM),ITMAP(MITEM),IBREC(MITEM-1)
 
      CHARACTER FSPEC*60
 
C     SET UP MAPPING FROM MASKED-IN ITEM NUMBERS TO ORIGINAL ITEM
C      NUMBERS.
      IN = 0
      DO 200 I = 1, NITEM
        IF(IMI(I).EQ.0) GOTO 200
        IN = IN + 1
        ITMAP(IN) = I
  200 CONTINUE
 
C     OPEN SCRATCH  FILE FOR INTERMEDIATE MATRIX.
      CALL GETAU (L)
      LUNTYP = 6
      FSPEC = 'scratch1'
      CALL SETLUN (FSPEC, L, LUNTYP)
      CALL UOPEN (L, LUNTYP, FSPEC, IDUMMY, NIM1+3, IERR)
      IF (IERR.NE.0) CALL FERROR ('ERROR OPENING FILE - scratch1.%')
 
C     CALCULATE RECORD ADDRESSES FOR INTERMEDIATE MATRIX.
      IBREC(1) = 1
      LSTGP = (MITEM - 1)/NIM1 + 1
      DO 300 IROW = 1, MITEM - 2
        LROW = MITEM - IROW
        IGP = (IROW - 1)/NIM1 + 1
        IF (IGP.EQ.LSTGP)  THEN
          NREC = 1
        ELSE
          L1 = MOD(IROW,NIM1)
          LREST = LROW
          NREC = 0
          IF (L1.NE.0) THEN
            LREST = LROW - (NIM1 - L1)
            NREC = 1
          ENDIF
          NREC = NREC + (LREST-1)/NIM2 + 1
        ENDIF
      IBREC(IROW+1) = IBREC(IROW) + NREC
  300 CONTINUE
 
      RETURN
      END
